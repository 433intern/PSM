#pragma warning(disable : 4996)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AgentProtocol.proto

#ifndef PROTOBUF_AgentProtocol_2eproto__INCLUDED
#define PROTOBUF_AgentProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace agent {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AgentProtocol_2eproto();
void protobuf_AssignDesc_AgentProtocol_2eproto();
void protobuf_ShutdownFile_AgentProtocol_2eproto();

class csAgentIDRequest;
class scAgentIDResponse;
class csProcessListRequest;
class scProcessListResponse;
class csProcessStateSend;
class csTotalProcessesStateSend;
class scHealthCheck;
class csHealthAck;
class scProcessCommandRequest;
class csProcessCommandResponse;
class scMachineInfoRequest;
class scMachineInfoRequest_ALL;
class csMachineInfoResponse;
class csMachineInfoResponse_ALL;
class scProcessInfoRequest;
class scProcessInfoRequest_ALL;
class csProcessInfoResponse;
class csProcessInfoResponse_ALL;
class scProcessRestrictionRequest;
class csPRocessRestrictionResponse;

enum csProcessCommandResponse_Result {
  csProcessCommandResponse_Result_SUCCESS = 0,
  csProcessCommandResponse_Result_FAILURE = 1
};
bool csProcessCommandResponse_Result_IsValid(int value);
const csProcessCommandResponse_Result csProcessCommandResponse_Result_Result_MIN = csProcessCommandResponse_Result_SUCCESS;
const csProcessCommandResponse_Result csProcessCommandResponse_Result_Result_MAX = csProcessCommandResponse_Result_FAILURE;
const int csProcessCommandResponse_Result_Result_ARRAYSIZE = csProcessCommandResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* csProcessCommandResponse_Result_descriptor();
inline const ::std::string& csProcessCommandResponse_Result_Name(csProcessCommandResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    csProcessCommandResponse_Result_descriptor(), value);
}
inline bool csProcessCommandResponse_Result_Parse(
    const ::std::string& name, csProcessCommandResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<csProcessCommandResponse_Result>(
    csProcessCommandResponse_Result_descriptor(), name, value);
}
enum csPRocessRestrictionResponse_Result {
  csPRocessRestrictionResponse_Result_SUCCESS = 0,
  csPRocessRestrictionResponse_Result_FAILURE = 1
};
bool csPRocessRestrictionResponse_Result_IsValid(int value);
const csPRocessRestrictionResponse_Result csPRocessRestrictionResponse_Result_Result_MIN = csPRocessRestrictionResponse_Result_SUCCESS;
const csPRocessRestrictionResponse_Result csPRocessRestrictionResponse_Result_Result_MAX = csPRocessRestrictionResponse_Result_FAILURE;
const int csPRocessRestrictionResponse_Result_Result_ARRAYSIZE = csPRocessRestrictionResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* csPRocessRestrictionResponse_Result_descriptor();
inline const ::std::string& csPRocessRestrictionResponse_Result_Name(csPRocessRestrictionResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    csPRocessRestrictionResponse_Result_descriptor(), value);
}
inline bool csPRocessRestrictionResponse_Result_Parse(
    const ::std::string& name, csPRocessRestrictionResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<csPRocessRestrictionResponse_Result>(
    csPRocessRestrictionResponse_Result_descriptor(), name, value);
}
enum agentType {
  AgentIDRequest = 0,
  AgentIDResponse = 1,
  ProcessListRequest = 2,
  ProcessListResponse = 3,
  ProcessStateSend = 4,
  TotalProcessesStateSend = 5,
  HealthCheck = 6,
  HealthAck = 7,
  ProcessCommandRequest = 8,
  ProcessCommandResponse = 9,
  MachineInfoRequest = 10,
  MachineInfoRequest_ALL = 11,
  ProcessInfoRequest = 12,
  ProcessInfoRequest_ALL = 13,
  ProcessInfoResponse = 14,
  ProcessInfoResponse_ALL = 15,
  ProcessRestrictionRequest = 16,
  PRocessRestrictionResponse = 17
};
bool agentType_IsValid(int value);
const agentType agentType_MIN = AgentIDRequest;
const agentType agentType_MAX = PRocessRestrictionResponse;
const int agentType_ARRAYSIZE = agentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* agentType_descriptor();
inline const ::std::string& agentType_Name(agentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    agentType_descriptor(), value);
}
inline bool agentType_Parse(
    const ::std::string& name, agentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<agentType>(
    agentType_descriptor(), name, value);
}
enum CommandType {
  START = 0,
  RESTART = 1,
  STOP = 2,
  ADDLIST = 3,
  DELETELIST = 4
};
bool CommandType_IsValid(int value);
const CommandType CommandType_MIN = START;
const CommandType CommandType_MAX = DELETELIST;
const int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandType_descriptor();
inline const ::std::string& CommandType_Name(CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandType_descriptor(), value);
}
inline bool CommandType_Parse(
    const ::std::string& name, CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
enum MachineCounter {
  DISK_TIME = 0,
  DISK_QUEUE_LENGTH = 1,
  FREE_SPACE_PERCENT = 2,
  FREE_SPACE_BYTES = 3,
  AVAILABLE_KBYTES = 4,
  PAGE_FAULT_SEC = 5,
  POOL_NONPAGED_BYTES = 6,
  PROCESSOR_QUEUE_LENGTH = 7,
  SYSTEM_CALLS_SEC = 8,
  CONTEXT_SWITCHES_SEC = 9,
  CARD_BYTES_TOTAL_SEC = 10,
  SERVER_BYTES_TOTAL_SEC = 11,
  SERVER_SESSIONS = 12,
  TOTAL_CPU_TIME_M = 13,
  KERNEL_TIME_M = 14,
  USER_TIME_M = 15,
  THREAD_COUNT_M = 16
};
bool MachineCounter_IsValid(int value);
const MachineCounter MachineCounter_MIN = DISK_TIME;
const MachineCounter MachineCounter_MAX = THREAD_COUNT_M;
const int MachineCounter_ARRAYSIZE = MachineCounter_MAX + 1;

const ::google::protobuf::EnumDescriptor* MachineCounter_descriptor();
inline const ::std::string& MachineCounter_Name(MachineCounter value) {
  return ::google::protobuf::internal::NameOfEnum(
    MachineCounter_descriptor(), value);
}
inline bool MachineCounter_Parse(
    const ::std::string& name, MachineCounter* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MachineCounter>(
    MachineCounter_descriptor(), name, value);
}
enum ProcessCounter {
  TOTAL_CPU_TIME = 0,
  KERNEL_TIME = 1,
  USER_TIME = 2,
  IO_DATA_BYTES_SEC = 3,
  THREAD_COUNT = 4,
  WORKING_SET_PRIVATE = 5,
  VIRTUAL_BYTES = 6
};
bool ProcessCounter_IsValid(int value);
const ProcessCounter ProcessCounter_MIN = TOTAL_CPU_TIME;
const ProcessCounter ProcessCounter_MAX = VIRTUAL_BYTES;
const int ProcessCounter_ARRAYSIZE = ProcessCounter_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProcessCounter_descriptor();
inline const ::std::string& ProcessCounter_Name(ProcessCounter value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProcessCounter_descriptor(), value);
}
inline bool ProcessCounter_Parse(
    const ::std::string& name, ProcessCounter* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProcessCounter>(
    ProcessCounter_descriptor(), name, value);
}
enum Restriction {
  USER_TIME_LIMIT = 0,
  MAX_WORKING_SET_SIZE = 1,
  MIN_WORKING_SET_SIZE = 2
};
bool Restriction_IsValid(int value);
const Restriction Restriction_MIN = USER_TIME_LIMIT;
const Restriction Restriction_MAX = MIN_WORKING_SET_SIZE;
const int Restriction_ARRAYSIZE = Restriction_MAX + 1;

const ::google::protobuf::EnumDescriptor* Restriction_descriptor();
inline const ::std::string& Restriction_Name(Restriction value) {
  return ::google::protobuf::internal::NameOfEnum(
    Restriction_descriptor(), value);
}
inline bool Restriction_Parse(
    const ::std::string& name, Restriction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Restriction>(
    Restriction_descriptor(), name, value);
}
// ===================================================================

class csAgentIDRequest : public ::google::protobuf::Message {
 public:
  csAgentIDRequest();
  virtual ~csAgentIDRequest();

  csAgentIDRequest(const csAgentIDRequest& from);

  inline csAgentIDRequest& operator=(const csAgentIDRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csAgentIDRequest& default_instance();

  void Swap(csAgentIDRequest* other);

  // implements Message ----------------------------------------------

  csAgentIDRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csAgentIDRequest& from);
  void MergeFrom(const csAgentIDRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hostIP = 1;
  inline bool has_hostip() const;
  inline void clear_hostip();
  static const int kHostIPFieldNumber = 1;
  inline ::google::protobuf::int32 hostip() const;
  inline void set_hostip(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:agent.csAgentIDRequest)
 private:
  inline void set_has_hostip();
  inline void clear_has_hostip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 hostip_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static csAgentIDRequest* default_instance_;
};
// -------------------------------------------------------------------

class scAgentIDResponse : public ::google::protobuf::Message {
 public:
  scAgentIDResponse();
  virtual ~scAgentIDResponse();

  scAgentIDResponse(const scAgentIDResponse& from);

  inline scAgentIDResponse& operator=(const scAgentIDResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scAgentIDResponse& default_instance();

  void Swap(scAgentIDResponse* other);

  // implements Message ----------------------------------------------

  scAgentIDResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scAgentIDResponse& from);
  void MergeFrom(const scAgentIDResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 agentID = 1;
  inline bool has_agentid() const;
  inline void clear_agentid();
  static const int kAgentIDFieldNumber = 1;
  inline ::google::protobuf::int32 agentid() const;
  inline void set_agentid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:agent.scAgentIDResponse)
 private:
  inline void set_has_agentid();
  inline void clear_has_agentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 agentid_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static scAgentIDResponse* default_instance_;
};
// -------------------------------------------------------------------

class csProcessListRequest : public ::google::protobuf::Message {
 public:
  csProcessListRequest();
  virtual ~csProcessListRequest();

  csProcessListRequest(const csProcessListRequest& from);

  inline csProcessListRequest& operator=(const csProcessListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csProcessListRequest& default_instance();

  void Swap(csProcessListRequest* other);

  // implements Message ----------------------------------------------

  csProcessListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csProcessListRequest& from);
  void MergeFrom(const csProcessListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:agent.csProcessListRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static csProcessListRequest* default_instance_;
};
// -------------------------------------------------------------------

class scProcessListResponse : public ::google::protobuf::Message {
 public:
  scProcessListResponse();
  virtual ~scProcessListResponse();

  scProcessListResponse(const scProcessListResponse& from);

  inline scProcessListResponse& operator=(const scProcessListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scProcessListResponse& default_instance();

  void Swap(scProcessListResponse* other);

  // implements Message ----------------------------------------------

  scProcessListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scProcessListResponse& from);
  void MergeFrom(const scProcessListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string processName = 1;
  inline int processname_size() const;
  inline void clear_processname();
  static const int kProcessNameFieldNumber = 1;
  inline const ::std::string& processname(int index) const;
  inline ::std::string* mutable_processname(int index);
  inline void set_processname(int index, const ::std::string& value);
  inline void set_processname(int index, const char* value);
  inline void set_processname(int index, const char* value, size_t size);
  inline ::std::string* add_processname();
  inline void add_processname(const ::std::string& value);
  inline void add_processname(const char* value);
  inline void add_processname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& processname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_processname();

  // @@protoc_insertion_point(class_scope:agent.scProcessListResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> processname_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static scProcessListResponse* default_instance_;
};
// -------------------------------------------------------------------

class csProcessStateSend : public ::google::protobuf::Message {
 public:
  csProcessStateSend();
  virtual ~csProcessStateSend();

  csProcessStateSend(const csProcessStateSend& from);

  inline csProcessStateSend& operator=(const csProcessStateSend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csProcessStateSend& default_instance();

  void Swap(csProcessStateSend* other);

  // implements Message ----------------------------------------------

  csProcessStateSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csProcessStateSend& from);
  void MergeFrom(const csProcessStateSend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string processName = 1;
  inline bool has_processname() const;
  inline void clear_processname();
  static const int kProcessNameFieldNumber = 1;
  inline const ::std::string& processname() const;
  inline void set_processname(const ::std::string& value);
  inline void set_processname(const char* value);
  inline void set_processname(const char* value, size_t size);
  inline ::std::string* mutable_processname();
  inline ::std::string* release_processname();
  inline void set_allocated_processname(::std::string* processname);

  // required int32 processID = 2;
  inline bool has_processid() const;
  inline void clear_processid();
  static const int kProcessIDFieldNumber = 2;
  inline ::google::protobuf::int32 processid() const;
  inline void set_processid(::google::protobuf::int32 value);

  // required bool isOn = 3;
  inline bool has_ison() const;
  inline void clear_ison();
  static const int kIsOnFieldNumber = 3;
  inline bool ison() const;
  inline void set_ison(bool value);

  // @@protoc_insertion_point(class_scope:agent.csProcessStateSend)
 private:
  inline void set_has_processname();
  inline void clear_has_processname();
  inline void set_has_processid();
  inline void clear_has_processid();
  inline void set_has_ison();
  inline void clear_has_ison();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* processname_;
  ::google::protobuf::int32 processid_;
  bool ison_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static csProcessStateSend* default_instance_;
};
// -------------------------------------------------------------------

class csTotalProcessesStateSend : public ::google::protobuf::Message {
 public:
  csTotalProcessesStateSend();
  virtual ~csTotalProcessesStateSend();

  csTotalProcessesStateSend(const csTotalProcessesStateSend& from);

  inline csTotalProcessesStateSend& operator=(const csTotalProcessesStateSend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csTotalProcessesStateSend& default_instance();

  void Swap(csTotalProcessesStateSend* other);

  // implements Message ----------------------------------------------

  csTotalProcessesStateSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csTotalProcessesStateSend& from);
  void MergeFrom(const csTotalProcessesStateSend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .agent.csProcessStateSend stateList = 1;
  inline int statelist_size() const;
  inline void clear_statelist();
  static const int kStateListFieldNumber = 1;
  inline const ::agent::csProcessStateSend& statelist(int index) const;
  inline ::agent::csProcessStateSend* mutable_statelist(int index);
  inline ::agent::csProcessStateSend* add_statelist();
  inline const ::google::protobuf::RepeatedPtrField< ::agent::csProcessStateSend >&
      statelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::agent::csProcessStateSend >*
      mutable_statelist();

  // @@protoc_insertion_point(class_scope:agent.csTotalProcessesStateSend)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::agent::csProcessStateSend > statelist_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static csTotalProcessesStateSend* default_instance_;
};
// -------------------------------------------------------------------

class scHealthCheck : public ::google::protobuf::Message {
 public:
  scHealthCheck();
  virtual ~scHealthCheck();

  scHealthCheck(const scHealthCheck& from);

  inline scHealthCheck& operator=(const scHealthCheck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scHealthCheck& default_instance();

  void Swap(scHealthCheck* other);

  // implements Message ----------------------------------------------

  scHealthCheck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scHealthCheck& from);
  void MergeFrom(const scHealthCheck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:agent.scHealthCheck)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static scHealthCheck* default_instance_;
};
// -------------------------------------------------------------------

class csHealthAck : public ::google::protobuf::Message {
 public:
  csHealthAck();
  virtual ~csHealthAck();

  csHealthAck(const csHealthAck& from);

  inline csHealthAck& operator=(const csHealthAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csHealthAck& default_instance();

  void Swap(csHealthAck* other);

  // implements Message ----------------------------------------------

  csHealthAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csHealthAck& from);
  void MergeFrom(const csHealthAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:agent.csHealthAck)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static csHealthAck* default_instance_;
};
// -------------------------------------------------------------------

class scProcessCommandRequest : public ::google::protobuf::Message {
 public:
  scProcessCommandRequest();
  virtual ~scProcessCommandRequest();

  scProcessCommandRequest(const scProcessCommandRequest& from);

  inline scProcessCommandRequest& operator=(const scProcessCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scProcessCommandRequest& default_instance();

  void Swap(scProcessCommandRequest* other);

  // implements Message ----------------------------------------------

  scProcessCommandRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scProcessCommandRequest& from);
  void MergeFrom(const scProcessCommandRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .agent.CommandType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::agent::CommandType type() const;
  inline void set_type(::agent::CommandType value);

  // required int32 processID = 2;
  inline bool has_processid() const;
  inline void clear_processid();
  static const int kProcessIDFieldNumber = 2;
  inline ::google::protobuf::int32 processid() const;
  inline void set_processid(::google::protobuf::int32 value);

  // optional string processName = 3;
  inline bool has_processname() const;
  inline void clear_processname();
  static const int kProcessNameFieldNumber = 3;
  inline const ::std::string& processname() const;
  inline void set_processname(const ::std::string& value);
  inline void set_processname(const char* value);
  inline void set_processname(const char* value, size_t size);
  inline ::std::string* mutable_processname();
  inline ::std::string* release_processname();
  inline void set_allocated_processname(::std::string* processname);

  // @@protoc_insertion_point(class_scope:agent.scProcessCommandRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_processid();
  inline void clear_has_processid();
  inline void set_has_processname();
  inline void clear_has_processname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 processid_;
  ::std::string* processname_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static scProcessCommandRequest* default_instance_;
};
// -------------------------------------------------------------------

class csProcessCommandResponse : public ::google::protobuf::Message {
 public:
  csProcessCommandResponse();
  virtual ~csProcessCommandResponse();

  csProcessCommandResponse(const csProcessCommandResponse& from);

  inline csProcessCommandResponse& operator=(const csProcessCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csProcessCommandResponse& default_instance();

  void Swap(csProcessCommandResponse* other);

  // implements Message ----------------------------------------------

  csProcessCommandResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csProcessCommandResponse& from);
  void MergeFrom(const csProcessCommandResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef csProcessCommandResponse_Result Result;
  static const Result SUCCESS = csProcessCommandResponse_Result_SUCCESS;
  static const Result FAILURE = csProcessCommandResponse_Result_FAILURE;
  static inline bool Result_IsValid(int value) {
    return csProcessCommandResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    csProcessCommandResponse_Result_Result_MIN;
  static const Result Result_MAX =
    csProcessCommandResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    csProcessCommandResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return csProcessCommandResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return csProcessCommandResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return csProcessCommandResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .agent.CommandType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::agent::CommandType type() const;
  inline void set_type(::agent::CommandType value);

  // required int32 processID = 2;
  inline bool has_processid() const;
  inline void clear_processid();
  static const int kProcessIDFieldNumber = 2;
  inline ::google::protobuf::int32 processid() const;
  inline void set_processid(::google::protobuf::int32 value);

  // required .agent.csProcessCommandResponse.Result result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::agent::csProcessCommandResponse_Result result() const;
  inline void set_result(::agent::csProcessCommandResponse_Result value);

  // optional string failReason = 4;
  inline bool has_failreason() const;
  inline void clear_failreason();
  static const int kFailReasonFieldNumber = 4;
  inline const ::std::string& failreason() const;
  inline void set_failreason(const ::std::string& value);
  inline void set_failreason(const char* value);
  inline void set_failreason(const char* value, size_t size);
  inline ::std::string* mutable_failreason();
  inline ::std::string* release_failreason();
  inline void set_allocated_failreason(::std::string* failreason);

  // @@protoc_insertion_point(class_scope:agent.csProcessCommandResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_processid();
  inline void clear_has_processid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_failreason();
  inline void clear_has_failreason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 processid_;
  ::std::string* failreason_;
  int result_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static csProcessCommandResponse* default_instance_;
};
// -------------------------------------------------------------------

class scMachineInfoRequest : public ::google::protobuf::Message {
 public:
  scMachineInfoRequest();
  virtual ~scMachineInfoRequest();

  scMachineInfoRequest(const scMachineInfoRequest& from);

  inline scMachineInfoRequest& operator=(const scMachineInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scMachineInfoRequest& default_instance();

  void Swap(scMachineInfoRequest* other);

  // implements Message ----------------------------------------------

  scMachineInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scMachineInfoRequest& from);
  void MergeFrom(const scMachineInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .agent.MachineCounter type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::agent::MachineCounter type() const;
  inline void set_type(::agent::MachineCounter value);

  // @@protoc_insertion_point(class_scope:agent.scMachineInfoRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static scMachineInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class scMachineInfoRequest_ALL : public ::google::protobuf::Message {
 public:
  scMachineInfoRequest_ALL();
  virtual ~scMachineInfoRequest_ALL();

  scMachineInfoRequest_ALL(const scMachineInfoRequest_ALL& from);

  inline scMachineInfoRequest_ALL& operator=(const scMachineInfoRequest_ALL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scMachineInfoRequest_ALL& default_instance();

  void Swap(scMachineInfoRequest_ALL* other);

  // implements Message ----------------------------------------------

  scMachineInfoRequest_ALL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scMachineInfoRequest_ALL& from);
  void MergeFrom(const scMachineInfoRequest_ALL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .agent.scMachineInfoRequest type = 1;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::agent::scMachineInfoRequest& type(int index) const;
  inline ::agent::scMachineInfoRequest* mutable_type(int index);
  inline ::agent::scMachineInfoRequest* add_type();
  inline const ::google::protobuf::RepeatedPtrField< ::agent::scMachineInfoRequest >&
      type() const;
  inline ::google::protobuf::RepeatedPtrField< ::agent::scMachineInfoRequest >*
      mutable_type();

  // @@protoc_insertion_point(class_scope:agent.scMachineInfoRequest_ALL)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::agent::scMachineInfoRequest > type_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static scMachineInfoRequest_ALL* default_instance_;
};
// -------------------------------------------------------------------

class csMachineInfoResponse : public ::google::protobuf::Message {
 public:
  csMachineInfoResponse();
  virtual ~csMachineInfoResponse();

  csMachineInfoResponse(const csMachineInfoResponse& from);

  inline csMachineInfoResponse& operator=(const csMachineInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csMachineInfoResponse& default_instance();

  void Swap(csMachineInfoResponse* other);

  // implements Message ----------------------------------------------

  csMachineInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csMachineInfoResponse& from);
  void MergeFrom(const csMachineInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .agent.MachineCounter type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::agent::MachineCounter type() const;
  inline void set_type(::agent::MachineCounter value);

  // repeated double result = 2;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline double result(int index) const;
  inline void set_result(int index, double value);
  inline void add_result(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      result() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_result();

  // @@protoc_insertion_point(class_scope:agent.csMachineInfoResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > result_;
  int type_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static csMachineInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class csMachineInfoResponse_ALL : public ::google::protobuf::Message {
 public:
  csMachineInfoResponse_ALL();
  virtual ~csMachineInfoResponse_ALL();

  csMachineInfoResponse_ALL(const csMachineInfoResponse_ALL& from);

  inline csMachineInfoResponse_ALL& operator=(const csMachineInfoResponse_ALL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csMachineInfoResponse_ALL& default_instance();

  void Swap(csMachineInfoResponse_ALL* other);

  // implements Message ----------------------------------------------

  csMachineInfoResponse_ALL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csMachineInfoResponse_ALL& from);
  void MergeFrom(const csMachineInfoResponse_ALL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .agent.csMachineInfoResponse result = 1;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::agent::csMachineInfoResponse& result(int index) const;
  inline ::agent::csMachineInfoResponse* mutable_result(int index);
  inline ::agent::csMachineInfoResponse* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::agent::csMachineInfoResponse >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::agent::csMachineInfoResponse >*
      mutable_result();

  // @@protoc_insertion_point(class_scope:agent.csMachineInfoResponse_ALL)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::agent::csMachineInfoResponse > result_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static csMachineInfoResponse_ALL* default_instance_;
};
// -------------------------------------------------------------------

class scProcessInfoRequest : public ::google::protobuf::Message {
 public:
  scProcessInfoRequest();
  virtual ~scProcessInfoRequest();

  scProcessInfoRequest(const scProcessInfoRequest& from);

  inline scProcessInfoRequest& operator=(const scProcessInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scProcessInfoRequest& default_instance();

  void Swap(scProcessInfoRequest* other);

  // implements Message ----------------------------------------------

  scProcessInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scProcessInfoRequest& from);
  void MergeFrom(const scProcessInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 processID = 1;
  inline bool has_processid() const;
  inline void clear_processid();
  static const int kProcessIDFieldNumber = 1;
  inline ::google::protobuf::int32 processid() const;
  inline void set_processid(::google::protobuf::int32 value);

  // required .agent.MachineCounter type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::agent::MachineCounter type() const;
  inline void set_type(::agent::MachineCounter value);

  // @@protoc_insertion_point(class_scope:agent.scProcessInfoRequest)
 private:
  inline void set_has_processid();
  inline void clear_has_processid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 processid_;
  int type_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static scProcessInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class scProcessInfoRequest_ALL : public ::google::protobuf::Message {
 public:
  scProcessInfoRequest_ALL();
  virtual ~scProcessInfoRequest_ALL();

  scProcessInfoRequest_ALL(const scProcessInfoRequest_ALL& from);

  inline scProcessInfoRequest_ALL& operator=(const scProcessInfoRequest_ALL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scProcessInfoRequest_ALL& default_instance();

  void Swap(scProcessInfoRequest_ALL* other);

  // implements Message ----------------------------------------------

  scProcessInfoRequest_ALL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scProcessInfoRequest_ALL& from);
  void MergeFrom(const scProcessInfoRequest_ALL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .agent.scProcessInfoRequest type = 1;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::agent::scProcessInfoRequest& type(int index) const;
  inline ::agent::scProcessInfoRequest* mutable_type(int index);
  inline ::agent::scProcessInfoRequest* add_type();
  inline const ::google::protobuf::RepeatedPtrField< ::agent::scProcessInfoRequest >&
      type() const;
  inline ::google::protobuf::RepeatedPtrField< ::agent::scProcessInfoRequest >*
      mutable_type();

  // @@protoc_insertion_point(class_scope:agent.scProcessInfoRequest_ALL)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::agent::scProcessInfoRequest > type_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static scProcessInfoRequest_ALL* default_instance_;
};
// -------------------------------------------------------------------

class csProcessInfoResponse : public ::google::protobuf::Message {
 public:
  csProcessInfoResponse();
  virtual ~csProcessInfoResponse();

  csProcessInfoResponse(const csProcessInfoResponse& from);

  inline csProcessInfoResponse& operator=(const csProcessInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csProcessInfoResponse& default_instance();

  void Swap(csProcessInfoResponse* other);

  // implements Message ----------------------------------------------

  csProcessInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csProcessInfoResponse& from);
  void MergeFrom(const csProcessInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 processID = 1;
  inline bool has_processid() const;
  inline void clear_processid();
  static const int kProcessIDFieldNumber = 1;
  inline ::google::protobuf::int32 processid() const;
  inline void set_processid(::google::protobuf::int32 value);

  // required .agent.MachineCounter type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::agent::MachineCounter type() const;
  inline void set_type(::agent::MachineCounter value);

  // repeated double result = 3;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline double result(int index) const;
  inline void set_result(int index, double value);
  inline void add_result(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      result() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_result();

  // @@protoc_insertion_point(class_scope:agent.csProcessInfoResponse)
 private:
  inline void set_has_processid();
  inline void clear_has_processid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 processid_;
  int type_;
  ::google::protobuf::RepeatedField< double > result_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static csProcessInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class csProcessInfoResponse_ALL : public ::google::protobuf::Message {
 public:
  csProcessInfoResponse_ALL();
  virtual ~csProcessInfoResponse_ALL();

  csProcessInfoResponse_ALL(const csProcessInfoResponse_ALL& from);

  inline csProcessInfoResponse_ALL& operator=(const csProcessInfoResponse_ALL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csProcessInfoResponse_ALL& default_instance();

  void Swap(csProcessInfoResponse_ALL* other);

  // implements Message ----------------------------------------------

  csProcessInfoResponse_ALL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csProcessInfoResponse_ALL& from);
  void MergeFrom(const csProcessInfoResponse_ALL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .agent.csProcessInfoResponse result = 1;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::agent::csProcessInfoResponse& result(int index) const;
  inline ::agent::csProcessInfoResponse* mutable_result(int index);
  inline ::agent::csProcessInfoResponse* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::agent::csProcessInfoResponse >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::agent::csProcessInfoResponse >*
      mutable_result();

  // @@protoc_insertion_point(class_scope:agent.csProcessInfoResponse_ALL)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::agent::csProcessInfoResponse > result_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static csProcessInfoResponse_ALL* default_instance_;
};
// -------------------------------------------------------------------

class scProcessRestrictionRequest : public ::google::protobuf::Message {
 public:
  scProcessRestrictionRequest();
  virtual ~scProcessRestrictionRequest();

  scProcessRestrictionRequest(const scProcessRestrictionRequest& from);

  inline scProcessRestrictionRequest& operator=(const scProcessRestrictionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scProcessRestrictionRequest& default_instance();

  void Swap(scProcessRestrictionRequest* other);

  // implements Message ----------------------------------------------

  scProcessRestrictionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scProcessRestrictionRequest& from);
  void MergeFrom(const scProcessRestrictionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 processID = 1;
  inline bool has_processid() const;
  inline void clear_processid();
  static const int kProcessIDFieldNumber = 1;
  inline ::google::protobuf::int32 processid() const;
  inline void set_processid(::google::protobuf::int32 value);

  // required .agent.Restriction type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::agent::Restriction type() const;
  inline void set_type(::agent::Restriction value);

  // required int32 value1 = 3;
  inline bool has_value1() const;
  inline void clear_value1();
  static const int kValue1FieldNumber = 3;
  inline ::google::protobuf::int32 value1() const;
  inline void set_value1(::google::protobuf::int32 value);

  // optional int32 value2 = 4;
  inline bool has_value2() const;
  inline void clear_value2();
  static const int kValue2FieldNumber = 4;
  inline ::google::protobuf::int32 value2() const;
  inline void set_value2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:agent.scProcessRestrictionRequest)
 private:
  inline void set_has_processid();
  inline void clear_has_processid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value1();
  inline void clear_has_value1();
  inline void set_has_value2();
  inline void clear_has_value2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 processid_;
  int type_;
  ::google::protobuf::int32 value1_;
  ::google::protobuf::int32 value2_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static scProcessRestrictionRequest* default_instance_;
};
// -------------------------------------------------------------------

class csPRocessRestrictionResponse : public ::google::protobuf::Message {
 public:
  csPRocessRestrictionResponse();
  virtual ~csPRocessRestrictionResponse();

  csPRocessRestrictionResponse(const csPRocessRestrictionResponse& from);

  inline csPRocessRestrictionResponse& operator=(const csPRocessRestrictionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csPRocessRestrictionResponse& default_instance();

  void Swap(csPRocessRestrictionResponse* other);

  // implements Message ----------------------------------------------

  csPRocessRestrictionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csPRocessRestrictionResponse& from);
  void MergeFrom(const csPRocessRestrictionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef csPRocessRestrictionResponse_Result Result;
  static const Result SUCCESS = csPRocessRestrictionResponse_Result_SUCCESS;
  static const Result FAILURE = csPRocessRestrictionResponse_Result_FAILURE;
  static inline bool Result_IsValid(int value) {
    return csPRocessRestrictionResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    csPRocessRestrictionResponse_Result_Result_MIN;
  static const Result Result_MAX =
    csPRocessRestrictionResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    csPRocessRestrictionResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return csPRocessRestrictionResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return csPRocessRestrictionResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return csPRocessRestrictionResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 processID = 1;
  inline bool has_processid() const;
  inline void clear_processid();
  static const int kProcessIDFieldNumber = 1;
  inline ::google::protobuf::int32 processid() const;
  inline void set_processid(::google::protobuf::int32 value);

  // required .agent.Restriction type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::agent::Restriction type() const;
  inline void set_type(::agent::Restriction value);

  // required .agent.csPRocessRestrictionResponse.Result result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::agent::csPRocessRestrictionResponse_Result result() const;
  inline void set_result(::agent::csPRocessRestrictionResponse_Result value);

  // optional string failReason = 4;
  inline bool has_failreason() const;
  inline void clear_failreason();
  static const int kFailReasonFieldNumber = 4;
  inline const ::std::string& failreason() const;
  inline void set_failreason(const ::std::string& value);
  inline void set_failreason(const char* value);
  inline void set_failreason(const char* value, size_t size);
  inline ::std::string* mutable_failreason();
  inline ::std::string* release_failreason();
  inline void set_allocated_failreason(::std::string* failreason);

  // @@protoc_insertion_point(class_scope:agent.csPRocessRestrictionResponse)
 private:
  inline void set_has_processid();
  inline void clear_has_processid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_failreason();
  inline void clear_has_failreason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 processid_;
  int type_;
  ::std::string* failreason_;
  int result_;
  friend void  protobuf_AddDesc_AgentProtocol_2eproto();
  friend void protobuf_AssignDesc_AgentProtocol_2eproto();
  friend void protobuf_ShutdownFile_AgentProtocol_2eproto();

  void InitAsDefaultInstance();
  static csPRocessRestrictionResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// csAgentIDRequest

// required int32 hostIP = 1;
inline bool csAgentIDRequest::has_hostip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csAgentIDRequest::set_has_hostip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csAgentIDRequest::clear_has_hostip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csAgentIDRequest::clear_hostip() {
  hostip_ = 0;
  clear_has_hostip();
}
inline ::google::protobuf::int32 csAgentIDRequest::hostip() const {
  // @@protoc_insertion_point(field_get:agent.csAgentIDRequest.hostIP)
  return hostip_;
}
inline void csAgentIDRequest::set_hostip(::google::protobuf::int32 value) {
  set_has_hostip();
  hostip_ = value;
  // @@protoc_insertion_point(field_set:agent.csAgentIDRequest.hostIP)
}

// -------------------------------------------------------------------

// scAgentIDResponse

// required int32 agentID = 1;
inline bool scAgentIDResponse::has_agentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scAgentIDResponse::set_has_agentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scAgentIDResponse::clear_has_agentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scAgentIDResponse::clear_agentid() {
  agentid_ = 0;
  clear_has_agentid();
}
inline ::google::protobuf::int32 scAgentIDResponse::agentid() const {
  // @@protoc_insertion_point(field_get:agent.scAgentIDResponse.agentID)
  return agentid_;
}
inline void scAgentIDResponse::set_agentid(::google::protobuf::int32 value) {
  set_has_agentid();
  agentid_ = value;
  // @@protoc_insertion_point(field_set:agent.scAgentIDResponse.agentID)
}

// -------------------------------------------------------------------

// csProcessListRequest

// -------------------------------------------------------------------

// scProcessListResponse

// repeated string processName = 1;
inline int scProcessListResponse::processname_size() const {
  return processname_.size();
}
inline void scProcessListResponse::clear_processname() {
  processname_.Clear();
}
inline const ::std::string& scProcessListResponse::processname(int index) const {
  // @@protoc_insertion_point(field_get:agent.scProcessListResponse.processName)
  return processname_.Get(index);
}
inline ::std::string* scProcessListResponse::mutable_processname(int index) {
  // @@protoc_insertion_point(field_mutable:agent.scProcessListResponse.processName)
  return processname_.Mutable(index);
}
inline void scProcessListResponse::set_processname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:agent.scProcessListResponse.processName)
  processname_.Mutable(index)->assign(value);
}
inline void scProcessListResponse::set_processname(int index, const char* value) {
  processname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agent.scProcessListResponse.processName)
}
inline void scProcessListResponse::set_processname(int index, const char* value, size_t size) {
  processname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agent.scProcessListResponse.processName)
}
inline ::std::string* scProcessListResponse::add_processname() {
  return processname_.Add();
}
inline void scProcessListResponse::add_processname(const ::std::string& value) {
  processname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agent.scProcessListResponse.processName)
}
inline void scProcessListResponse::add_processname(const char* value) {
  processname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agent.scProcessListResponse.processName)
}
inline void scProcessListResponse::add_processname(const char* value, size_t size) {
  processname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agent.scProcessListResponse.processName)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
scProcessListResponse::processname() const {
  // @@protoc_insertion_point(field_list:agent.scProcessListResponse.processName)
  return processname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
scProcessListResponse::mutable_processname() {
  // @@protoc_insertion_point(field_mutable_list:agent.scProcessListResponse.processName)
  return &processname_;
}

// -------------------------------------------------------------------

// csProcessStateSend

// required string processName = 1;
inline bool csProcessStateSend::has_processname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csProcessStateSend::set_has_processname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csProcessStateSend::clear_has_processname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csProcessStateSend::clear_processname() {
  if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    processname_->clear();
  }
  clear_has_processname();
}
inline const ::std::string& csProcessStateSend::processname() const {
  // @@protoc_insertion_point(field_get:agent.csProcessStateSend.processName)
  return *processname_;
}
inline void csProcessStateSend::set_processname(const ::std::string& value) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
  // @@protoc_insertion_point(field_set:agent.csProcessStateSend.processName)
}
inline void csProcessStateSend::set_processname(const char* value) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
  // @@protoc_insertion_point(field_set_char:agent.csProcessStateSend.processName)
}
inline void csProcessStateSend::set_processname(const char* value, size_t size) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    processname_ = new ::std::string;
  }
  processname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agent.csProcessStateSend.processName)
}
inline ::std::string* csProcessStateSend::mutable_processname() {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    processname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:agent.csProcessStateSend.processName)
  return processname_;
}
inline ::std::string* csProcessStateSend::release_processname() {
  clear_has_processname();
  if (processname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = processname_;
    processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csProcessStateSend::set_allocated_processname(::std::string* processname) {
  if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete processname_;
  }
  if (processname) {
    set_has_processname();
    processname_ = processname;
  } else {
    clear_has_processname();
    processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:agent.csProcessStateSend.processName)
}

// required int32 processID = 2;
inline bool csProcessStateSend::has_processid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void csProcessStateSend::set_has_processid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void csProcessStateSend::clear_has_processid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void csProcessStateSend::clear_processid() {
  processid_ = 0;
  clear_has_processid();
}
inline ::google::protobuf::int32 csProcessStateSend::processid() const {
  // @@protoc_insertion_point(field_get:agent.csProcessStateSend.processID)
  return processid_;
}
inline void csProcessStateSend::set_processid(::google::protobuf::int32 value) {
  set_has_processid();
  processid_ = value;
  // @@protoc_insertion_point(field_set:agent.csProcessStateSend.processID)
}

// required bool isOn = 3;
inline bool csProcessStateSend::has_ison() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void csProcessStateSend::set_has_ison() {
  _has_bits_[0] |= 0x00000004u;
}
inline void csProcessStateSend::clear_has_ison() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void csProcessStateSend::clear_ison() {
  ison_ = false;
  clear_has_ison();
}
inline bool csProcessStateSend::ison() const {
  // @@protoc_insertion_point(field_get:agent.csProcessStateSend.isOn)
  return ison_;
}
inline void csProcessStateSend::set_ison(bool value) {
  set_has_ison();
  ison_ = value;
  // @@protoc_insertion_point(field_set:agent.csProcessStateSend.isOn)
}

// -------------------------------------------------------------------

// csTotalProcessesStateSend

// repeated .agent.csProcessStateSend stateList = 1;
inline int csTotalProcessesStateSend::statelist_size() const {
  return statelist_.size();
}
inline void csTotalProcessesStateSend::clear_statelist() {
  statelist_.Clear();
}
inline const ::agent::csProcessStateSend& csTotalProcessesStateSend::statelist(int index) const {
  // @@protoc_insertion_point(field_get:agent.csTotalProcessesStateSend.stateList)
  return statelist_.Get(index);
}
inline ::agent::csProcessStateSend* csTotalProcessesStateSend::mutable_statelist(int index) {
  // @@protoc_insertion_point(field_mutable:agent.csTotalProcessesStateSend.stateList)
  return statelist_.Mutable(index);
}
inline ::agent::csProcessStateSend* csTotalProcessesStateSend::add_statelist() {
  // @@protoc_insertion_point(field_add:agent.csTotalProcessesStateSend.stateList)
  return statelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::agent::csProcessStateSend >&
csTotalProcessesStateSend::statelist() const {
  // @@protoc_insertion_point(field_list:agent.csTotalProcessesStateSend.stateList)
  return statelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::agent::csProcessStateSend >*
csTotalProcessesStateSend::mutable_statelist() {
  // @@protoc_insertion_point(field_mutable_list:agent.csTotalProcessesStateSend.stateList)
  return &statelist_;
}

// -------------------------------------------------------------------

// scHealthCheck

// -------------------------------------------------------------------

// csHealthAck

// -------------------------------------------------------------------

// scProcessCommandRequest

// required .agent.CommandType type = 1;
inline bool scProcessCommandRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scProcessCommandRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scProcessCommandRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scProcessCommandRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::agent::CommandType scProcessCommandRequest::type() const {
  // @@protoc_insertion_point(field_get:agent.scProcessCommandRequest.type)
  return static_cast< ::agent::CommandType >(type_);
}
inline void scProcessCommandRequest::set_type(::agent::CommandType value) {
  assert(::agent::CommandType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:agent.scProcessCommandRequest.type)
}

// required int32 processID = 2;
inline bool scProcessCommandRequest::has_processid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void scProcessCommandRequest::set_has_processid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void scProcessCommandRequest::clear_has_processid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void scProcessCommandRequest::clear_processid() {
  processid_ = 0;
  clear_has_processid();
}
inline ::google::protobuf::int32 scProcessCommandRequest::processid() const {
  // @@protoc_insertion_point(field_get:agent.scProcessCommandRequest.processID)
  return processid_;
}
inline void scProcessCommandRequest::set_processid(::google::protobuf::int32 value) {
  set_has_processid();
  processid_ = value;
  // @@protoc_insertion_point(field_set:agent.scProcessCommandRequest.processID)
}

// optional string processName = 3;
inline bool scProcessCommandRequest::has_processname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void scProcessCommandRequest::set_has_processname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void scProcessCommandRequest::clear_has_processname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void scProcessCommandRequest::clear_processname() {
  if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    processname_->clear();
  }
  clear_has_processname();
}
inline const ::std::string& scProcessCommandRequest::processname() const {
  // @@protoc_insertion_point(field_get:agent.scProcessCommandRequest.processName)
  return *processname_;
}
inline void scProcessCommandRequest::set_processname(const ::std::string& value) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
  // @@protoc_insertion_point(field_set:agent.scProcessCommandRequest.processName)
}
inline void scProcessCommandRequest::set_processname(const char* value) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
  // @@protoc_insertion_point(field_set_char:agent.scProcessCommandRequest.processName)
}
inline void scProcessCommandRequest::set_processname(const char* value, size_t size) {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    processname_ = new ::std::string;
  }
  processname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agent.scProcessCommandRequest.processName)
}
inline ::std::string* scProcessCommandRequest::mutable_processname() {
  set_has_processname();
  if (processname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    processname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:agent.scProcessCommandRequest.processName)
  return processname_;
}
inline ::std::string* scProcessCommandRequest::release_processname() {
  clear_has_processname();
  if (processname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = processname_;
    processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void scProcessCommandRequest::set_allocated_processname(::std::string* processname) {
  if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete processname_;
  }
  if (processname) {
    set_has_processname();
    processname_ = processname;
  } else {
    clear_has_processname();
    processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:agent.scProcessCommandRequest.processName)
}

// -------------------------------------------------------------------

// csProcessCommandResponse

// required .agent.CommandType type = 1;
inline bool csProcessCommandResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csProcessCommandResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csProcessCommandResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csProcessCommandResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::agent::CommandType csProcessCommandResponse::type() const {
  // @@protoc_insertion_point(field_get:agent.csProcessCommandResponse.type)
  return static_cast< ::agent::CommandType >(type_);
}
inline void csProcessCommandResponse::set_type(::agent::CommandType value) {
  assert(::agent::CommandType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:agent.csProcessCommandResponse.type)
}

// required int32 processID = 2;
inline bool csProcessCommandResponse::has_processid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void csProcessCommandResponse::set_has_processid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void csProcessCommandResponse::clear_has_processid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void csProcessCommandResponse::clear_processid() {
  processid_ = 0;
  clear_has_processid();
}
inline ::google::protobuf::int32 csProcessCommandResponse::processid() const {
  // @@protoc_insertion_point(field_get:agent.csProcessCommandResponse.processID)
  return processid_;
}
inline void csProcessCommandResponse::set_processid(::google::protobuf::int32 value) {
  set_has_processid();
  processid_ = value;
  // @@protoc_insertion_point(field_set:agent.csProcessCommandResponse.processID)
}

// required .agent.csProcessCommandResponse.Result result = 3;
inline bool csProcessCommandResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void csProcessCommandResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void csProcessCommandResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void csProcessCommandResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::agent::csProcessCommandResponse_Result csProcessCommandResponse::result() const {
  // @@protoc_insertion_point(field_get:agent.csProcessCommandResponse.result)
  return static_cast< ::agent::csProcessCommandResponse_Result >(result_);
}
inline void csProcessCommandResponse::set_result(::agent::csProcessCommandResponse_Result value) {
  assert(::agent::csProcessCommandResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:agent.csProcessCommandResponse.result)
}

// optional string failReason = 4;
inline bool csProcessCommandResponse::has_failreason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void csProcessCommandResponse::set_has_failreason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void csProcessCommandResponse::clear_has_failreason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void csProcessCommandResponse::clear_failreason() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_->clear();
  }
  clear_has_failreason();
}
inline const ::std::string& csProcessCommandResponse::failreason() const {
  // @@protoc_insertion_point(field_get:agent.csProcessCommandResponse.failReason)
  return *failreason_;
}
inline void csProcessCommandResponse::set_failreason(const ::std::string& value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set:agent.csProcessCommandResponse.failReason)
}
inline void csProcessCommandResponse::set_failreason(const char* value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:agent.csProcessCommandResponse.failReason)
}
inline void csProcessCommandResponse::set_failreason(const char* value, size_t size) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agent.csProcessCommandResponse.failReason)
}
inline ::std::string* csProcessCommandResponse::mutable_failreason() {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:agent.csProcessCommandResponse.failReason)
  return failreason_;
}
inline ::std::string* csProcessCommandResponse::release_failreason() {
  clear_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failreason_;
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csProcessCommandResponse::set_allocated_failreason(::std::string* failreason) {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (failreason) {
    set_has_failreason();
    failreason_ = failreason;
  } else {
    clear_has_failreason();
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:agent.csProcessCommandResponse.failReason)
}

// -------------------------------------------------------------------

// scMachineInfoRequest

// required .agent.MachineCounter type = 1;
inline bool scMachineInfoRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scMachineInfoRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scMachineInfoRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scMachineInfoRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::agent::MachineCounter scMachineInfoRequest::type() const {
  // @@protoc_insertion_point(field_get:agent.scMachineInfoRequest.type)
  return static_cast< ::agent::MachineCounter >(type_);
}
inline void scMachineInfoRequest::set_type(::agent::MachineCounter value) {
  assert(::agent::MachineCounter_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:agent.scMachineInfoRequest.type)
}

// -------------------------------------------------------------------

// scMachineInfoRequest_ALL

// repeated .agent.scMachineInfoRequest type = 1;
inline int scMachineInfoRequest_ALL::type_size() const {
  return type_.size();
}
inline void scMachineInfoRequest_ALL::clear_type() {
  type_.Clear();
}
inline const ::agent::scMachineInfoRequest& scMachineInfoRequest_ALL::type(int index) const {
  // @@protoc_insertion_point(field_get:agent.scMachineInfoRequest_ALL.type)
  return type_.Get(index);
}
inline ::agent::scMachineInfoRequest* scMachineInfoRequest_ALL::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:agent.scMachineInfoRequest_ALL.type)
  return type_.Mutable(index);
}
inline ::agent::scMachineInfoRequest* scMachineInfoRequest_ALL::add_type() {
  // @@protoc_insertion_point(field_add:agent.scMachineInfoRequest_ALL.type)
  return type_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::agent::scMachineInfoRequest >&
scMachineInfoRequest_ALL::type() const {
  // @@protoc_insertion_point(field_list:agent.scMachineInfoRequest_ALL.type)
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::agent::scMachineInfoRequest >*
scMachineInfoRequest_ALL::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:agent.scMachineInfoRequest_ALL.type)
  return &type_;
}

// -------------------------------------------------------------------

// csMachineInfoResponse

// required .agent.MachineCounter type = 1;
inline bool csMachineInfoResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csMachineInfoResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csMachineInfoResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csMachineInfoResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::agent::MachineCounter csMachineInfoResponse::type() const {
  // @@protoc_insertion_point(field_get:agent.csMachineInfoResponse.type)
  return static_cast< ::agent::MachineCounter >(type_);
}
inline void csMachineInfoResponse::set_type(::agent::MachineCounter value) {
  assert(::agent::MachineCounter_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:agent.csMachineInfoResponse.type)
}

// repeated double result = 2;
inline int csMachineInfoResponse::result_size() const {
  return result_.size();
}
inline void csMachineInfoResponse::clear_result() {
  result_.Clear();
}
inline double csMachineInfoResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:agent.csMachineInfoResponse.result)
  return result_.Get(index);
}
inline void csMachineInfoResponse::set_result(int index, double value) {
  result_.Set(index, value);
  // @@protoc_insertion_point(field_set:agent.csMachineInfoResponse.result)
}
inline void csMachineInfoResponse::add_result(double value) {
  result_.Add(value);
  // @@protoc_insertion_point(field_add:agent.csMachineInfoResponse.result)
}
inline const ::google::protobuf::RepeatedField< double >&
csMachineInfoResponse::result() const {
  // @@protoc_insertion_point(field_list:agent.csMachineInfoResponse.result)
  return result_;
}
inline ::google::protobuf::RepeatedField< double >*
csMachineInfoResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:agent.csMachineInfoResponse.result)
  return &result_;
}

// -------------------------------------------------------------------

// csMachineInfoResponse_ALL

// repeated .agent.csMachineInfoResponse result = 1;
inline int csMachineInfoResponse_ALL::result_size() const {
  return result_.size();
}
inline void csMachineInfoResponse_ALL::clear_result() {
  result_.Clear();
}
inline const ::agent::csMachineInfoResponse& csMachineInfoResponse_ALL::result(int index) const {
  // @@protoc_insertion_point(field_get:agent.csMachineInfoResponse_ALL.result)
  return result_.Get(index);
}
inline ::agent::csMachineInfoResponse* csMachineInfoResponse_ALL::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:agent.csMachineInfoResponse_ALL.result)
  return result_.Mutable(index);
}
inline ::agent::csMachineInfoResponse* csMachineInfoResponse_ALL::add_result() {
  // @@protoc_insertion_point(field_add:agent.csMachineInfoResponse_ALL.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::agent::csMachineInfoResponse >&
csMachineInfoResponse_ALL::result() const {
  // @@protoc_insertion_point(field_list:agent.csMachineInfoResponse_ALL.result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::agent::csMachineInfoResponse >*
csMachineInfoResponse_ALL::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:agent.csMachineInfoResponse_ALL.result)
  return &result_;
}

// -------------------------------------------------------------------

// scProcessInfoRequest

// required int32 processID = 1;
inline bool scProcessInfoRequest::has_processid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scProcessInfoRequest::set_has_processid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scProcessInfoRequest::clear_has_processid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scProcessInfoRequest::clear_processid() {
  processid_ = 0;
  clear_has_processid();
}
inline ::google::protobuf::int32 scProcessInfoRequest::processid() const {
  // @@protoc_insertion_point(field_get:agent.scProcessInfoRequest.processID)
  return processid_;
}
inline void scProcessInfoRequest::set_processid(::google::protobuf::int32 value) {
  set_has_processid();
  processid_ = value;
  // @@protoc_insertion_point(field_set:agent.scProcessInfoRequest.processID)
}

// required .agent.MachineCounter type = 2;
inline bool scProcessInfoRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void scProcessInfoRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void scProcessInfoRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void scProcessInfoRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::agent::MachineCounter scProcessInfoRequest::type() const {
  // @@protoc_insertion_point(field_get:agent.scProcessInfoRequest.type)
  return static_cast< ::agent::MachineCounter >(type_);
}
inline void scProcessInfoRequest::set_type(::agent::MachineCounter value) {
  assert(::agent::MachineCounter_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:agent.scProcessInfoRequest.type)
}

// -------------------------------------------------------------------

// scProcessInfoRequest_ALL

// repeated .agent.scProcessInfoRequest type = 1;
inline int scProcessInfoRequest_ALL::type_size() const {
  return type_.size();
}
inline void scProcessInfoRequest_ALL::clear_type() {
  type_.Clear();
}
inline const ::agent::scProcessInfoRequest& scProcessInfoRequest_ALL::type(int index) const {
  // @@protoc_insertion_point(field_get:agent.scProcessInfoRequest_ALL.type)
  return type_.Get(index);
}
inline ::agent::scProcessInfoRequest* scProcessInfoRequest_ALL::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:agent.scProcessInfoRequest_ALL.type)
  return type_.Mutable(index);
}
inline ::agent::scProcessInfoRequest* scProcessInfoRequest_ALL::add_type() {
  // @@protoc_insertion_point(field_add:agent.scProcessInfoRequest_ALL.type)
  return type_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::agent::scProcessInfoRequest >&
scProcessInfoRequest_ALL::type() const {
  // @@protoc_insertion_point(field_list:agent.scProcessInfoRequest_ALL.type)
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::agent::scProcessInfoRequest >*
scProcessInfoRequest_ALL::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:agent.scProcessInfoRequest_ALL.type)
  return &type_;
}

// -------------------------------------------------------------------

// csProcessInfoResponse

// required int32 processID = 1;
inline bool csProcessInfoResponse::has_processid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csProcessInfoResponse::set_has_processid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csProcessInfoResponse::clear_has_processid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csProcessInfoResponse::clear_processid() {
  processid_ = 0;
  clear_has_processid();
}
inline ::google::protobuf::int32 csProcessInfoResponse::processid() const {
  // @@protoc_insertion_point(field_get:agent.csProcessInfoResponse.processID)
  return processid_;
}
inline void csProcessInfoResponse::set_processid(::google::protobuf::int32 value) {
  set_has_processid();
  processid_ = value;
  // @@protoc_insertion_point(field_set:agent.csProcessInfoResponse.processID)
}

// required .agent.MachineCounter type = 2;
inline bool csProcessInfoResponse::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void csProcessInfoResponse::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void csProcessInfoResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void csProcessInfoResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::agent::MachineCounter csProcessInfoResponse::type() const {
  // @@protoc_insertion_point(field_get:agent.csProcessInfoResponse.type)
  return static_cast< ::agent::MachineCounter >(type_);
}
inline void csProcessInfoResponse::set_type(::agent::MachineCounter value) {
  assert(::agent::MachineCounter_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:agent.csProcessInfoResponse.type)
}

// repeated double result = 3;
inline int csProcessInfoResponse::result_size() const {
  return result_.size();
}
inline void csProcessInfoResponse::clear_result() {
  result_.Clear();
}
inline double csProcessInfoResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:agent.csProcessInfoResponse.result)
  return result_.Get(index);
}
inline void csProcessInfoResponse::set_result(int index, double value) {
  result_.Set(index, value);
  // @@protoc_insertion_point(field_set:agent.csProcessInfoResponse.result)
}
inline void csProcessInfoResponse::add_result(double value) {
  result_.Add(value);
  // @@protoc_insertion_point(field_add:agent.csProcessInfoResponse.result)
}
inline const ::google::protobuf::RepeatedField< double >&
csProcessInfoResponse::result() const {
  // @@protoc_insertion_point(field_list:agent.csProcessInfoResponse.result)
  return result_;
}
inline ::google::protobuf::RepeatedField< double >*
csProcessInfoResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:agent.csProcessInfoResponse.result)
  return &result_;
}

// -------------------------------------------------------------------

// csProcessInfoResponse_ALL

// repeated .agent.csProcessInfoResponse result = 1;
inline int csProcessInfoResponse_ALL::result_size() const {
  return result_.size();
}
inline void csProcessInfoResponse_ALL::clear_result() {
  result_.Clear();
}
inline const ::agent::csProcessInfoResponse& csProcessInfoResponse_ALL::result(int index) const {
  // @@protoc_insertion_point(field_get:agent.csProcessInfoResponse_ALL.result)
  return result_.Get(index);
}
inline ::agent::csProcessInfoResponse* csProcessInfoResponse_ALL::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:agent.csProcessInfoResponse_ALL.result)
  return result_.Mutable(index);
}
inline ::agent::csProcessInfoResponse* csProcessInfoResponse_ALL::add_result() {
  // @@protoc_insertion_point(field_add:agent.csProcessInfoResponse_ALL.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::agent::csProcessInfoResponse >&
csProcessInfoResponse_ALL::result() const {
  // @@protoc_insertion_point(field_list:agent.csProcessInfoResponse_ALL.result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::agent::csProcessInfoResponse >*
csProcessInfoResponse_ALL::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:agent.csProcessInfoResponse_ALL.result)
  return &result_;
}

// -------------------------------------------------------------------

// scProcessRestrictionRequest

// required int32 processID = 1;
inline bool scProcessRestrictionRequest::has_processid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scProcessRestrictionRequest::set_has_processid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scProcessRestrictionRequest::clear_has_processid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scProcessRestrictionRequest::clear_processid() {
  processid_ = 0;
  clear_has_processid();
}
inline ::google::protobuf::int32 scProcessRestrictionRequest::processid() const {
  // @@protoc_insertion_point(field_get:agent.scProcessRestrictionRequest.processID)
  return processid_;
}
inline void scProcessRestrictionRequest::set_processid(::google::protobuf::int32 value) {
  set_has_processid();
  processid_ = value;
  // @@protoc_insertion_point(field_set:agent.scProcessRestrictionRequest.processID)
}

// required .agent.Restriction type = 2;
inline bool scProcessRestrictionRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void scProcessRestrictionRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void scProcessRestrictionRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void scProcessRestrictionRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::agent::Restriction scProcessRestrictionRequest::type() const {
  // @@protoc_insertion_point(field_get:agent.scProcessRestrictionRequest.type)
  return static_cast< ::agent::Restriction >(type_);
}
inline void scProcessRestrictionRequest::set_type(::agent::Restriction value) {
  assert(::agent::Restriction_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:agent.scProcessRestrictionRequest.type)
}

// required int32 value1 = 3;
inline bool scProcessRestrictionRequest::has_value1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void scProcessRestrictionRequest::set_has_value1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void scProcessRestrictionRequest::clear_has_value1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void scProcessRestrictionRequest::clear_value1() {
  value1_ = 0;
  clear_has_value1();
}
inline ::google::protobuf::int32 scProcessRestrictionRequest::value1() const {
  // @@protoc_insertion_point(field_get:agent.scProcessRestrictionRequest.value1)
  return value1_;
}
inline void scProcessRestrictionRequest::set_value1(::google::protobuf::int32 value) {
  set_has_value1();
  value1_ = value;
  // @@protoc_insertion_point(field_set:agent.scProcessRestrictionRequest.value1)
}

// optional int32 value2 = 4;
inline bool scProcessRestrictionRequest::has_value2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void scProcessRestrictionRequest::set_has_value2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void scProcessRestrictionRequest::clear_has_value2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void scProcessRestrictionRequest::clear_value2() {
  value2_ = 0;
  clear_has_value2();
}
inline ::google::protobuf::int32 scProcessRestrictionRequest::value2() const {
  // @@protoc_insertion_point(field_get:agent.scProcessRestrictionRequest.value2)
  return value2_;
}
inline void scProcessRestrictionRequest::set_value2(::google::protobuf::int32 value) {
  set_has_value2();
  value2_ = value;
  // @@protoc_insertion_point(field_set:agent.scProcessRestrictionRequest.value2)
}

// -------------------------------------------------------------------

// csPRocessRestrictionResponse

// required int32 processID = 1;
inline bool csPRocessRestrictionResponse::has_processid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csPRocessRestrictionResponse::set_has_processid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csPRocessRestrictionResponse::clear_has_processid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csPRocessRestrictionResponse::clear_processid() {
  processid_ = 0;
  clear_has_processid();
}
inline ::google::protobuf::int32 csPRocessRestrictionResponse::processid() const {
  // @@protoc_insertion_point(field_get:agent.csPRocessRestrictionResponse.processID)
  return processid_;
}
inline void csPRocessRestrictionResponse::set_processid(::google::protobuf::int32 value) {
  set_has_processid();
  processid_ = value;
  // @@protoc_insertion_point(field_set:agent.csPRocessRestrictionResponse.processID)
}

// required .agent.Restriction type = 2;
inline bool csPRocessRestrictionResponse::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void csPRocessRestrictionResponse::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void csPRocessRestrictionResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void csPRocessRestrictionResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::agent::Restriction csPRocessRestrictionResponse::type() const {
  // @@protoc_insertion_point(field_get:agent.csPRocessRestrictionResponse.type)
  return static_cast< ::agent::Restriction >(type_);
}
inline void csPRocessRestrictionResponse::set_type(::agent::Restriction value) {
  assert(::agent::Restriction_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:agent.csPRocessRestrictionResponse.type)
}

// required .agent.csPRocessRestrictionResponse.Result result = 3;
inline bool csPRocessRestrictionResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void csPRocessRestrictionResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void csPRocessRestrictionResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void csPRocessRestrictionResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::agent::csPRocessRestrictionResponse_Result csPRocessRestrictionResponse::result() const {
  // @@protoc_insertion_point(field_get:agent.csPRocessRestrictionResponse.result)
  return static_cast< ::agent::csPRocessRestrictionResponse_Result >(result_);
}
inline void csPRocessRestrictionResponse::set_result(::agent::csPRocessRestrictionResponse_Result value) {
  assert(::agent::csPRocessRestrictionResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:agent.csPRocessRestrictionResponse.result)
}

// optional string failReason = 4;
inline bool csPRocessRestrictionResponse::has_failreason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void csPRocessRestrictionResponse::set_has_failreason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void csPRocessRestrictionResponse::clear_has_failreason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void csPRocessRestrictionResponse::clear_failreason() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_->clear();
  }
  clear_has_failreason();
}
inline const ::std::string& csPRocessRestrictionResponse::failreason() const {
  // @@protoc_insertion_point(field_get:agent.csPRocessRestrictionResponse.failReason)
  return *failreason_;
}
inline void csPRocessRestrictionResponse::set_failreason(const ::std::string& value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set:agent.csPRocessRestrictionResponse.failReason)
}
inline void csPRocessRestrictionResponse::set_failreason(const char* value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:agent.csPRocessRestrictionResponse.failReason)
}
inline void csPRocessRestrictionResponse::set_failreason(const char* value, size_t size) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agent.csPRocessRestrictionResponse.failReason)
}
inline ::std::string* csPRocessRestrictionResponse::mutable_failreason() {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:agent.csPRocessRestrictionResponse.failReason)
  return failreason_;
}
inline ::std::string* csPRocessRestrictionResponse::release_failreason() {
  clear_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failreason_;
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csPRocessRestrictionResponse::set_allocated_failreason(::std::string* failreason) {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (failreason) {
    set_has_failreason();
    failreason_ = failreason;
  } else {
    clear_has_failreason();
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:agent.csPRocessRestrictionResponse.failReason)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace agent

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::agent::csProcessCommandResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agent::csProcessCommandResponse_Result>() {
  return ::agent::csProcessCommandResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::agent::csPRocessRestrictionResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agent::csPRocessRestrictionResponse_Result>() {
  return ::agent::csPRocessRestrictionResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::agent::agentType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agent::agentType>() {
  return ::agent::agentType_descriptor();
}
template <> struct is_proto_enum< ::agent::CommandType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agent::CommandType>() {
  return ::agent::CommandType_descriptor();
}
template <> struct is_proto_enum< ::agent::MachineCounter> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agent::MachineCounter>() {
  return ::agent::MachineCounter_descriptor();
}
template <> struct is_proto_enum< ::agent::ProcessCounter> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agent::ProcessCounter>() {
  return ::agent::ProcessCounter_descriptor();
}
template <> struct is_proto_enum< ::agent::Restriction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agent::Restriction>() {
  return ::agent::Restriction_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AgentProtocol_2eproto__INCLUDED
