// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AgentProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AgentProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace agent {

namespace {

const ::google::protobuf::Descriptor* csAgentIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csAgentIDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* scAgentIDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scAgentIDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* csProcessListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csProcessListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* scProcessListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scProcessListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* csProcessStateSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csProcessStateSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* csTotalProcessesStateSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csTotalProcessesStateSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* scHealthCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scHealthCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* csHealthAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csHealthAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* scProcessCommandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scProcessCommandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* csProcessCommandResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csProcessCommandResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* csProcessCommandResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* scProcessRestrictionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scProcessRestrictionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* csProcessRestrictionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csProcessRestrictionResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* csProcessRestrictionResponse_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* agentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MachineCounter_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProcessCounter_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Restriction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AgentProtocol_2eproto() {
  protobuf_AddDesc_AgentProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AgentProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  csAgentIDRequest_descriptor_ = file->message_type(0);
  static const int csAgentIDRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csAgentIDRequest, hostip_),
  };
  csAgentIDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csAgentIDRequest_descriptor_,
      csAgentIDRequest::default_instance_,
      csAgentIDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csAgentIDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csAgentIDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csAgentIDRequest));
  scAgentIDResponse_descriptor_ = file->message_type(1);
  static const int scAgentIDResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scAgentIDResponse, agentid_),
  };
  scAgentIDResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scAgentIDResponse_descriptor_,
      scAgentIDResponse::default_instance_,
      scAgentIDResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scAgentIDResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scAgentIDResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scAgentIDResponse));
  csProcessListRequest_descriptor_ = file->message_type(2);
  static const int csProcessListRequest_offsets_[1] = {
  };
  csProcessListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csProcessListRequest_descriptor_,
      csProcessListRequest::default_instance_,
      csProcessListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csProcessListRequest));
  scProcessListResponse_descriptor_ = file->message_type(3);
  static const int scProcessListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessListResponse, processname_),
  };
  scProcessListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scProcessListResponse_descriptor_,
      scProcessListResponse::default_instance_,
      scProcessListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scProcessListResponse));
  csProcessStateSend_descriptor_ = file->message_type(4);
  static const int csProcessStateSend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessStateSend, processname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessStateSend, processid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessStateSend, ison_),
  };
  csProcessStateSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csProcessStateSend_descriptor_,
      csProcessStateSend::default_instance_,
      csProcessStateSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessStateSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessStateSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csProcessStateSend));
  csTotalProcessesStateSend_descriptor_ = file->message_type(5);
  static const int csTotalProcessesStateSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csTotalProcessesStateSend, statelist_),
  };
  csTotalProcessesStateSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csTotalProcessesStateSend_descriptor_,
      csTotalProcessesStateSend::default_instance_,
      csTotalProcessesStateSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csTotalProcessesStateSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csTotalProcessesStateSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csTotalProcessesStateSend));
  scHealthCheck_descriptor_ = file->message_type(6);
  static const int scHealthCheck_offsets_[1] = {
  };
  scHealthCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scHealthCheck_descriptor_,
      scHealthCheck::default_instance_,
      scHealthCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scHealthCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scHealthCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scHealthCheck));
  csHealthAck_descriptor_ = file->message_type(7);
  static const int csHealthAck_offsets_[1] = {
  };
  csHealthAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csHealthAck_descriptor_,
      csHealthAck::default_instance_,
      csHealthAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csHealthAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csHealthAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csHealthAck));
  scProcessCommandRequest_descriptor_ = file->message_type(8);
  static const int scProcessCommandRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessCommandRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessCommandRequest, processid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessCommandRequest, processname_),
  };
  scProcessCommandRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scProcessCommandRequest_descriptor_,
      scProcessCommandRequest::default_instance_,
      scProcessCommandRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessCommandRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessCommandRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scProcessCommandRequest));
  csProcessCommandResponse_descriptor_ = file->message_type(9);
  static const int csProcessCommandResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessCommandResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessCommandResponse, processid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessCommandResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessCommandResponse, failreason_),
  };
  csProcessCommandResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csProcessCommandResponse_descriptor_,
      csProcessCommandResponse::default_instance_,
      csProcessCommandResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessCommandResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessCommandResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csProcessCommandResponse));
  csProcessCommandResponse_Result_descriptor_ = csProcessCommandResponse_descriptor_->enum_type(0);
  scProcessRestrictionRequest_descriptor_ = file->message_type(10);
  static const int scProcessRestrictionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessRestrictionRequest, processid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessRestrictionRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessRestrictionRequest, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessRestrictionRequest, value2_),
  };
  scProcessRestrictionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scProcessRestrictionRequest_descriptor_,
      scProcessRestrictionRequest::default_instance_,
      scProcessRestrictionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessRestrictionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessRestrictionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scProcessRestrictionRequest));
  csProcessRestrictionResponse_descriptor_ = file->message_type(11);
  static const int csProcessRestrictionResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessRestrictionResponse, processid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessRestrictionResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessRestrictionResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessRestrictionResponse, failreason_),
  };
  csProcessRestrictionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csProcessRestrictionResponse_descriptor_,
      csProcessRestrictionResponse::default_instance_,
      csProcessRestrictionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessRestrictionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessRestrictionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csProcessRestrictionResponse));
  csProcessRestrictionResponse_Result_descriptor_ = csProcessRestrictionResponse_descriptor_->enum_type(0);
  agentType_descriptor_ = file->enum_type(0);
  CommandType_descriptor_ = file->enum_type(1);
  MachineCounter_descriptor_ = file->enum_type(2);
  ProcessCounter_descriptor_ = file->enum_type(3);
  Restriction_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AgentProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csAgentIDRequest_descriptor_, &csAgentIDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scAgentIDResponse_descriptor_, &scAgentIDResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csProcessListRequest_descriptor_, &csProcessListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scProcessListResponse_descriptor_, &scProcessListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csProcessStateSend_descriptor_, &csProcessStateSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csTotalProcessesStateSend_descriptor_, &csTotalProcessesStateSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scHealthCheck_descriptor_, &scHealthCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csHealthAck_descriptor_, &csHealthAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scProcessCommandRequest_descriptor_, &scProcessCommandRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csProcessCommandResponse_descriptor_, &csProcessCommandResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scProcessRestrictionRequest_descriptor_, &scProcessRestrictionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csProcessRestrictionResponse_descriptor_, &csProcessRestrictionResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AgentProtocol_2eproto() {
  delete csAgentIDRequest::default_instance_;
  delete csAgentIDRequest_reflection_;
  delete scAgentIDResponse::default_instance_;
  delete scAgentIDResponse_reflection_;
  delete csProcessListRequest::default_instance_;
  delete csProcessListRequest_reflection_;
  delete scProcessListResponse::default_instance_;
  delete scProcessListResponse_reflection_;
  delete csProcessStateSend::default_instance_;
  delete csProcessStateSend_reflection_;
  delete csTotalProcessesStateSend::default_instance_;
  delete csTotalProcessesStateSend_reflection_;
  delete scHealthCheck::default_instance_;
  delete scHealthCheck_reflection_;
  delete csHealthAck::default_instance_;
  delete csHealthAck_reflection_;
  delete scProcessCommandRequest::default_instance_;
  delete scProcessCommandRequest_reflection_;
  delete csProcessCommandResponse::default_instance_;
  delete csProcessCommandResponse_reflection_;
  delete scProcessRestrictionRequest::default_instance_;
  delete scProcessRestrictionRequest_reflection_;
  delete csProcessRestrictionResponse::default_instance_;
  delete csProcessRestrictionResponse_reflection_;
}

void protobuf_AddDesc_AgentProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023AgentProtocol.proto\022\005agent\"\"\n\020csAgentI"
    "DRequest\022\016\n\006hostIP\030\001 \002(\005\"$\n\021scAgentIDRes"
    "ponse\022\017\n\007agentID\030\001 \002(\005\"\026\n\024csProcessListR"
    "equest\",\n\025scProcessListResponse\022\023\n\013proce"
    "ssName\030\001 \003(\t\"J\n\022csProcessStateSend\022\023\n\013pr"
    "ocessName\030\001 \002(\t\022\021\n\tprocessID\030\002 \002(\005\022\014\n\004is"
    "On\030\003 \002(\010\"I\n\031csTotalProcessesStateSend\022,\n"
    "\tstateList\030\001 \003(\0132\031.agent.csProcessStateS"
    "end\"\017\n\rscHealthCheck\"\r\n\013csHealthAck\"c\n\027s"
    "cProcessCommandRequest\022 \n\004type\030\001 \002(\0162\022.a"
    "gent.CommandType\022\021\n\tprocessID\030\002 \002(\005\022\023\n\013p"
    "rocessName\030\003 \001(\t\"\277\001\n\030csProcessCommandRes"
    "ponse\022 \n\004type\030\001 \002(\0162\022.agent.CommandType\022"
    "\021\n\tprocessID\030\002 \002(\005\0226\n\006result\030\003 \002(\0162&.age"
    "nt.csProcessCommandResponse.Result\022\022\n\nfa"
    "ilReason\030\004 \001(\t\"\"\n\006Result\022\013\n\007SUCCESS\020\000\022\013\n"
    "\007FAILURE\020\001\"r\n\033scProcessRestrictionReques"
    "t\022\021\n\tprocessID\030\001 \002(\005\022 \n\004type\030\002 \002(\0162\022.age"
    "nt.Restriction\022\016\n\006value1\030\003 \002(\005\022\016\n\006value2"
    "\030\004 \001(\005\"\307\001\n\034csProcessRestrictionResponse\022"
    "\021\n\tprocessID\030\001 \002(\005\022 \n\004type\030\002 \002(\0162\022.agent"
    ".Restriction\022:\n\006result\030\003 \002(\0162*.agent.csP"
    "rocessRestrictionResponse.Result\022\022\n\nfail"
    "Reason\030\004 \001(\t\"\"\n\006Result\022\013\n\007SUCCESS\020\000\022\013\n\007F"
    "AILURE\020\001*\256\002\n\tagentType\022\022\n\016AgentIDRequest"
    "\020\000\022\023\n\017AgentIDResponse\020\001\022\026\n\022ProcessListRe"
    "quest\020\002\022\027\n\023ProcessListResponse\020\003\022\024\n\020Proc"
    "essStateSend\020\004\022\033\n\027TotalProcessesStateSen"
    "d\020\005\022\017\n\013HealthCheck\020\006\022\r\n\tHealthAck\020\007\022\031\n\025P"
    "rocessCommandRequest\020\010\022\032\n\026ProcessCommand"
    "Response\020\t\022\035\n\031ProcessRestrictionRequest\020"
    "\020\022\036\n\032ProcessRestrictionResponse\020\021*L\n\013Com"
    "mandType\022\t\n\005START\020\000\022\013\n\007RESTART\020\001\022\010\n\004STOP"
    "\020\002\022\013\n\007ADDLIST\020\003\022\016\n\nDELETELIST\020\004*\214\003\n\016Mach"
    "ineCounter\022\r\n\tDISK_TIME\020\000\022\025\n\021DISK_QUEUE_"
    "LENGTH\020\001\022\026\n\022FREE_SPACE_PERCENT\020\002\022\024\n\020FREE"
    "_SPACE_BYTES\020\003\022\024\n\020AVAILABLE_KBYTES\020\004\022\022\n\016"
    "PAGE_FAULT_SEC\020\005\022\027\n\023POOL_NONPAGED_BYTES\020"
    "\006\022\032\n\026PROCESSOR_QUEUE_LENGTH\020\007\022\024\n\020SYSTEM_"
    "CALLS_SEC\020\010\022\030\n\024CONTEXT_SWITCHES_SEC\020\t\022\030\n"
    "\024CARD_BYTES_TOTAL_SEC\020\n\022\032\n\026SERVER_BYTES_"
    "TOTAL_SEC\020\013\022\023\n\017SERVER_SESSIONS\020\014\022\024\n\020TOTA"
    "L_CPU_TIME_M\020\r\022\021\n\rKERNEL_TIME_M\020\016\022\017\n\013USE"
    "R_TIME_M\020\017\022\022\n\016THREAD_COUNT_M\020\020*\231\001\n\016Proce"
    "ssCounter\022\022\n\016TOTAL_CPU_TIME\020\000\022\017\n\013KERNEL_"
    "TIME\020\001\022\r\n\tUSER_TIME\020\002\022\025\n\021IO_DATA_BYTES_S"
    "EC\020\003\022\020\n\014THREAD_COUNT\020\004\022\027\n\023WORKING_SET_PR"
    "IVATE\020\005\022\021\n\rVIRTUAL_BYTES\020\006*V\n\013Restrictio"
    "n\022\023\n\017USER_TIME_LIMIT\020\000\022\030\n\024MAX_WORKING_SE"
    "T_SIZE\020\001\022\030\n\024MIN_WORKING_SET_SIZE\020\002", 1994);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AgentProtocol.proto", &protobuf_RegisterTypes);
  csAgentIDRequest::default_instance_ = new csAgentIDRequest();
  scAgentIDResponse::default_instance_ = new scAgentIDResponse();
  csProcessListRequest::default_instance_ = new csProcessListRequest();
  scProcessListResponse::default_instance_ = new scProcessListResponse();
  csProcessStateSend::default_instance_ = new csProcessStateSend();
  csTotalProcessesStateSend::default_instance_ = new csTotalProcessesStateSend();
  scHealthCheck::default_instance_ = new scHealthCheck();
  csHealthAck::default_instance_ = new csHealthAck();
  scProcessCommandRequest::default_instance_ = new scProcessCommandRequest();
  csProcessCommandResponse::default_instance_ = new csProcessCommandResponse();
  scProcessRestrictionRequest::default_instance_ = new scProcessRestrictionRequest();
  csProcessRestrictionResponse::default_instance_ = new csProcessRestrictionResponse();
  csAgentIDRequest::default_instance_->InitAsDefaultInstance();
  scAgentIDResponse::default_instance_->InitAsDefaultInstance();
  csProcessListRequest::default_instance_->InitAsDefaultInstance();
  scProcessListResponse::default_instance_->InitAsDefaultInstance();
  csProcessStateSend::default_instance_->InitAsDefaultInstance();
  csTotalProcessesStateSend::default_instance_->InitAsDefaultInstance();
  scHealthCheck::default_instance_->InitAsDefaultInstance();
  csHealthAck::default_instance_->InitAsDefaultInstance();
  scProcessCommandRequest::default_instance_->InitAsDefaultInstance();
  csProcessCommandResponse::default_instance_->InitAsDefaultInstance();
  scProcessRestrictionRequest::default_instance_->InitAsDefaultInstance();
  csProcessRestrictionResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AgentProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AgentProtocol_2eproto {
  StaticDescriptorInitializer_AgentProtocol_2eproto() {
    protobuf_AddDesc_AgentProtocol_2eproto();
  }
} static_descriptor_initializer_AgentProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* agentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agentType_descriptor_;
}
bool agentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandType_descriptor_;
}
bool CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MachineCounter_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineCounter_descriptor_;
}
bool MachineCounter_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProcessCounter_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessCounter_descriptor_;
}
bool ProcessCounter_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Restriction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Restriction_descriptor_;
}
bool Restriction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int csAgentIDRequest::kHostIPFieldNumber;
#endif  // !_MSC_VER

csAgentIDRequest::csAgentIDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csAgentIDRequest)
}

void csAgentIDRequest::InitAsDefaultInstance() {
}

csAgentIDRequest::csAgentIDRequest(const csAgentIDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csAgentIDRequest)
}

void csAgentIDRequest::SharedCtor() {
  _cached_size_ = 0;
  hostip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csAgentIDRequest::~csAgentIDRequest() {
  // @@protoc_insertion_point(destructor:agent.csAgentIDRequest)
  SharedDtor();
}

void csAgentIDRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csAgentIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csAgentIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csAgentIDRequest_descriptor_;
}

const csAgentIDRequest& csAgentIDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csAgentIDRequest* csAgentIDRequest::default_instance_ = NULL;

csAgentIDRequest* csAgentIDRequest::New() const {
  return new csAgentIDRequest;
}

void csAgentIDRequest::Clear() {
  hostip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csAgentIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csAgentIDRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hostIP = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hostip_)));
          set_has_hostip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csAgentIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csAgentIDRequest)
  return false;
#undef DO_
}

void csAgentIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csAgentIDRequest)
  // required int32 hostIP = 1;
  if (has_hostip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hostip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csAgentIDRequest)
}

::google::protobuf::uint8* csAgentIDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csAgentIDRequest)
  // required int32 hostIP = 1;
  if (has_hostip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hostip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csAgentIDRequest)
  return target;
}

int csAgentIDRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hostIP = 1;
    if (has_hostip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hostip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csAgentIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csAgentIDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csAgentIDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csAgentIDRequest::MergeFrom(const csAgentIDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostip()) {
      set_hostip(from.hostip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csAgentIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csAgentIDRequest::CopyFrom(const csAgentIDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csAgentIDRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void csAgentIDRequest::Swap(csAgentIDRequest* other) {
  if (other != this) {
    std::swap(hostip_, other->hostip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csAgentIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csAgentIDRequest_descriptor_;
  metadata.reflection = csAgentIDRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scAgentIDResponse::kAgentIDFieldNumber;
#endif  // !_MSC_VER

scAgentIDResponse::scAgentIDResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scAgentIDResponse)
}

void scAgentIDResponse::InitAsDefaultInstance() {
}

scAgentIDResponse::scAgentIDResponse(const scAgentIDResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scAgentIDResponse)
}

void scAgentIDResponse::SharedCtor() {
  _cached_size_ = 0;
  agentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scAgentIDResponse::~scAgentIDResponse() {
  // @@protoc_insertion_point(destructor:agent.scAgentIDResponse)
  SharedDtor();
}

void scAgentIDResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scAgentIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scAgentIDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scAgentIDResponse_descriptor_;
}

const scAgentIDResponse& scAgentIDResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scAgentIDResponse* scAgentIDResponse::default_instance_ = NULL;

scAgentIDResponse* scAgentIDResponse::New() const {
  return new scAgentIDResponse;
}

void scAgentIDResponse::Clear() {
  agentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scAgentIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scAgentIDResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 agentID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agentid_)));
          set_has_agentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scAgentIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scAgentIDResponse)
  return false;
#undef DO_
}

void scAgentIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scAgentIDResponse)
  // required int32 agentID = 1;
  if (has_agentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->agentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scAgentIDResponse)
}

::google::protobuf::uint8* scAgentIDResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scAgentIDResponse)
  // required int32 agentID = 1;
  if (has_agentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->agentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scAgentIDResponse)
  return target;
}

int scAgentIDResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 agentID = 1;
    if (has_agentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scAgentIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scAgentIDResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scAgentIDResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scAgentIDResponse::MergeFrom(const scAgentIDResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agentid()) {
      set_agentid(from.agentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scAgentIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scAgentIDResponse::CopyFrom(const scAgentIDResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scAgentIDResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void scAgentIDResponse::Swap(scAgentIDResponse* other) {
  if (other != this) {
    std::swap(agentid_, other->agentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scAgentIDResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scAgentIDResponse_descriptor_;
  metadata.reflection = scAgentIDResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

csProcessListRequest::csProcessListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csProcessListRequest)
}

void csProcessListRequest::InitAsDefaultInstance() {
}

csProcessListRequest::csProcessListRequest(const csProcessListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csProcessListRequest)
}

void csProcessListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csProcessListRequest::~csProcessListRequest() {
  // @@protoc_insertion_point(destructor:agent.csProcessListRequest)
  SharedDtor();
}

void csProcessListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csProcessListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csProcessListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csProcessListRequest_descriptor_;
}

const csProcessListRequest& csProcessListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csProcessListRequest* csProcessListRequest::default_instance_ = NULL;

csProcessListRequest* csProcessListRequest::New() const {
  return new csProcessListRequest;
}

void csProcessListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csProcessListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csProcessListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csProcessListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csProcessListRequest)
  return false;
#undef DO_
}

void csProcessListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csProcessListRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csProcessListRequest)
}

::google::protobuf::uint8* csProcessListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csProcessListRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csProcessListRequest)
  return target;
}

int csProcessListRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csProcessListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csProcessListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csProcessListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csProcessListRequest::MergeFrom(const csProcessListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csProcessListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csProcessListRequest::CopyFrom(const csProcessListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csProcessListRequest::IsInitialized() const {

  return true;
}

void csProcessListRequest::Swap(csProcessListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csProcessListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csProcessListRequest_descriptor_;
  metadata.reflection = csProcessListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scProcessListResponse::kProcessNameFieldNumber;
#endif  // !_MSC_VER

scProcessListResponse::scProcessListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scProcessListResponse)
}

void scProcessListResponse::InitAsDefaultInstance() {
}

scProcessListResponse::scProcessListResponse(const scProcessListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scProcessListResponse)
}

void scProcessListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scProcessListResponse::~scProcessListResponse() {
  // @@protoc_insertion_point(destructor:agent.scProcessListResponse)
  SharedDtor();
}

void scProcessListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scProcessListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scProcessListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scProcessListResponse_descriptor_;
}

const scProcessListResponse& scProcessListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scProcessListResponse* scProcessListResponse::default_instance_ = NULL;

scProcessListResponse* scProcessListResponse::New() const {
  return new scProcessListResponse;
}

void scProcessListResponse::Clear() {
  processname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scProcessListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scProcessListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string processName = 1;
      case 1: {
        if (tag == 10) {
         parse_processName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_processname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processname(this->processname_size() - 1).data(),
            this->processname(this->processname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "processname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_processName;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scProcessListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scProcessListResponse)
  return false;
#undef DO_
}

void scProcessListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scProcessListResponse)
  // repeated string processName = 1;
  for (int i = 0; i < this->processname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->processname(i).data(), this->processname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "processname");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->processname(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scProcessListResponse)
}

::google::protobuf::uint8* scProcessListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scProcessListResponse)
  // repeated string processName = 1;
  for (int i = 0; i < this->processname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname(i).data(), this->processname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->processname(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scProcessListResponse)
  return target;
}

int scProcessListResponse::ByteSize() const {
  int total_size = 0;

  // repeated string processName = 1;
  total_size += 1 * this->processname_size();
  for (int i = 0; i < this->processname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->processname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scProcessListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scProcessListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scProcessListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scProcessListResponse::MergeFrom(const scProcessListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  processname_.MergeFrom(from.processname_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scProcessListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scProcessListResponse::CopyFrom(const scProcessListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scProcessListResponse::IsInitialized() const {

  return true;
}

void scProcessListResponse::Swap(scProcessListResponse* other) {
  if (other != this) {
    processname_.Swap(&other->processname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scProcessListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scProcessListResponse_descriptor_;
  metadata.reflection = scProcessListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int csProcessStateSend::kProcessNameFieldNumber;
const int csProcessStateSend::kProcessIDFieldNumber;
const int csProcessStateSend::kIsOnFieldNumber;
#endif  // !_MSC_VER

csProcessStateSend::csProcessStateSend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csProcessStateSend)
}

void csProcessStateSend::InitAsDefaultInstance() {
}

csProcessStateSend::csProcessStateSend(const csProcessStateSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csProcessStateSend)
}

void csProcessStateSend::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processid_ = 0;
  ison_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csProcessStateSend::~csProcessStateSend() {
  // @@protoc_insertion_point(destructor:agent.csProcessStateSend)
  SharedDtor();
}

void csProcessStateSend::SharedDtor() {
  if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete processname_;
  }
  if (this != default_instance_) {
  }
}

void csProcessStateSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csProcessStateSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csProcessStateSend_descriptor_;
}

const csProcessStateSend& csProcessStateSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csProcessStateSend* csProcessStateSend::default_instance_ = NULL;

csProcessStateSend* csProcessStateSend::New() const {
  return new csProcessStateSend;
}

void csProcessStateSend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<csProcessStateSend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(processid_, ison_);
    if (has_processname()) {
      if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        processname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csProcessStateSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csProcessStateSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string processName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processname().data(), this->processname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "processname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_processID;
        break;
      }

      // required int32 processID = 2;
      case 2: {
        if (tag == 16) {
         parse_processID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processid_)));
          set_has_processid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isOn;
        break;
      }

      // required bool isOn = 3;
      case 3: {
        if (tag == 24) {
         parse_isOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ison_)));
          set_has_ison();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csProcessStateSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csProcessStateSend)
  return false;
#undef DO_
}

void csProcessStateSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csProcessStateSend)
  // required string processName = 1;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->processname(), output);
  }

  // required int32 processID = 2;
  if (has_processid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->processid(), output);
  }

  // required bool isOn = 3;
  if (has_ison()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ison(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csProcessStateSend)
}

::google::protobuf::uint8* csProcessStateSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csProcessStateSend)
  // required string processName = 1;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->processname(), target);
  }

  // required int32 processID = 2;
  if (has_processid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->processid(), target);
  }

  // required bool isOn = 3;
  if (has_ison()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ison(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csProcessStateSend)
  return target;
}

int csProcessStateSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string processName = 1;
    if (has_processname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processname());
    }

    // required int32 processID = 2;
    if (has_processid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processid());
    }

    // required bool isOn = 3;
    if (has_ison()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csProcessStateSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csProcessStateSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csProcessStateSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csProcessStateSend::MergeFrom(const csProcessStateSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processname()) {
      set_processname(from.processname());
    }
    if (from.has_processid()) {
      set_processid(from.processid());
    }
    if (from.has_ison()) {
      set_ison(from.ison());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csProcessStateSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csProcessStateSend::CopyFrom(const csProcessStateSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csProcessStateSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void csProcessStateSend::Swap(csProcessStateSend* other) {
  if (other != this) {
    std::swap(processname_, other->processname_);
    std::swap(processid_, other->processid_);
    std::swap(ison_, other->ison_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csProcessStateSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csProcessStateSend_descriptor_;
  metadata.reflection = csProcessStateSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int csTotalProcessesStateSend::kStateListFieldNumber;
#endif  // !_MSC_VER

csTotalProcessesStateSend::csTotalProcessesStateSend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csTotalProcessesStateSend)
}

void csTotalProcessesStateSend::InitAsDefaultInstance() {
}

csTotalProcessesStateSend::csTotalProcessesStateSend(const csTotalProcessesStateSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csTotalProcessesStateSend)
}

void csTotalProcessesStateSend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csTotalProcessesStateSend::~csTotalProcessesStateSend() {
  // @@protoc_insertion_point(destructor:agent.csTotalProcessesStateSend)
  SharedDtor();
}

void csTotalProcessesStateSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csTotalProcessesStateSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csTotalProcessesStateSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csTotalProcessesStateSend_descriptor_;
}

const csTotalProcessesStateSend& csTotalProcessesStateSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csTotalProcessesStateSend* csTotalProcessesStateSend::default_instance_ = NULL;

csTotalProcessesStateSend* csTotalProcessesStateSend::New() const {
  return new csTotalProcessesStateSend;
}

void csTotalProcessesStateSend::Clear() {
  statelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csTotalProcessesStateSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csTotalProcessesStateSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .agent.csProcessStateSend stateList = 1;
      case 1: {
        if (tag == 10) {
         parse_stateList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_stateList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csTotalProcessesStateSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csTotalProcessesStateSend)
  return false;
#undef DO_
}

void csTotalProcessesStateSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csTotalProcessesStateSend)
  // repeated .agent.csProcessStateSend stateList = 1;
  for (int i = 0; i < this->statelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csTotalProcessesStateSend)
}

::google::protobuf::uint8* csTotalProcessesStateSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csTotalProcessesStateSend)
  // repeated .agent.csProcessStateSend stateList = 1;
  for (int i = 0; i < this->statelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csTotalProcessesStateSend)
  return target;
}

int csTotalProcessesStateSend::ByteSize() const {
  int total_size = 0;

  // repeated .agent.csProcessStateSend stateList = 1;
  total_size += 1 * this->statelist_size();
  for (int i = 0; i < this->statelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csTotalProcessesStateSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csTotalProcessesStateSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csTotalProcessesStateSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csTotalProcessesStateSend::MergeFrom(const csTotalProcessesStateSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  statelist_.MergeFrom(from.statelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csTotalProcessesStateSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csTotalProcessesStateSend::CopyFrom(const csTotalProcessesStateSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csTotalProcessesStateSend::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->statelist())) return false;
  return true;
}

void csTotalProcessesStateSend::Swap(csTotalProcessesStateSend* other) {
  if (other != this) {
    statelist_.Swap(&other->statelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csTotalProcessesStateSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csTotalProcessesStateSend_descriptor_;
  metadata.reflection = csTotalProcessesStateSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

scHealthCheck::scHealthCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scHealthCheck)
}

void scHealthCheck::InitAsDefaultInstance() {
}

scHealthCheck::scHealthCheck(const scHealthCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scHealthCheck)
}

void scHealthCheck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scHealthCheck::~scHealthCheck() {
  // @@protoc_insertion_point(destructor:agent.scHealthCheck)
  SharedDtor();
}

void scHealthCheck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scHealthCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scHealthCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scHealthCheck_descriptor_;
}

const scHealthCheck& scHealthCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scHealthCheck* scHealthCheck::default_instance_ = NULL;

scHealthCheck* scHealthCheck::New() const {
  return new scHealthCheck;
}

void scHealthCheck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scHealthCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scHealthCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scHealthCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scHealthCheck)
  return false;
#undef DO_
}

void scHealthCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scHealthCheck)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scHealthCheck)
}

::google::protobuf::uint8* scHealthCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scHealthCheck)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scHealthCheck)
  return target;
}

int scHealthCheck::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scHealthCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scHealthCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scHealthCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scHealthCheck::MergeFrom(const scHealthCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scHealthCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scHealthCheck::CopyFrom(const scHealthCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scHealthCheck::IsInitialized() const {

  return true;
}

void scHealthCheck::Swap(scHealthCheck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scHealthCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scHealthCheck_descriptor_;
  metadata.reflection = scHealthCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

csHealthAck::csHealthAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csHealthAck)
}

void csHealthAck::InitAsDefaultInstance() {
}

csHealthAck::csHealthAck(const csHealthAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csHealthAck)
}

void csHealthAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csHealthAck::~csHealthAck() {
  // @@protoc_insertion_point(destructor:agent.csHealthAck)
  SharedDtor();
}

void csHealthAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csHealthAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csHealthAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csHealthAck_descriptor_;
}

const csHealthAck& csHealthAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csHealthAck* csHealthAck::default_instance_ = NULL;

csHealthAck* csHealthAck::New() const {
  return new csHealthAck;
}

void csHealthAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csHealthAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csHealthAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csHealthAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csHealthAck)
  return false;
#undef DO_
}

void csHealthAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csHealthAck)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csHealthAck)
}

::google::protobuf::uint8* csHealthAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csHealthAck)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csHealthAck)
  return target;
}

int csHealthAck::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csHealthAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csHealthAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csHealthAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csHealthAck::MergeFrom(const csHealthAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csHealthAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csHealthAck::CopyFrom(const csHealthAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csHealthAck::IsInitialized() const {

  return true;
}

void csHealthAck::Swap(csHealthAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csHealthAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csHealthAck_descriptor_;
  metadata.reflection = csHealthAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scProcessCommandRequest::kTypeFieldNumber;
const int scProcessCommandRequest::kProcessIDFieldNumber;
const int scProcessCommandRequest::kProcessNameFieldNumber;
#endif  // !_MSC_VER

scProcessCommandRequest::scProcessCommandRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scProcessCommandRequest)
}

void scProcessCommandRequest::InitAsDefaultInstance() {
}

scProcessCommandRequest::scProcessCommandRequest(const scProcessCommandRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scProcessCommandRequest)
}

void scProcessCommandRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  processid_ = 0;
  processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scProcessCommandRequest::~scProcessCommandRequest() {
  // @@protoc_insertion_point(destructor:agent.scProcessCommandRequest)
  SharedDtor();
}

void scProcessCommandRequest::SharedDtor() {
  if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete processname_;
  }
  if (this != default_instance_) {
  }
}

void scProcessCommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scProcessCommandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scProcessCommandRequest_descriptor_;
}

const scProcessCommandRequest& scProcessCommandRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scProcessCommandRequest* scProcessCommandRequest::default_instance_ = NULL;

scProcessCommandRequest* scProcessCommandRequest::New() const {
  return new scProcessCommandRequest;
}

void scProcessCommandRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<scProcessCommandRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, processid_);
    if (has_processname()) {
      if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        processname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scProcessCommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scProcessCommandRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .agent.CommandType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::CommandType_IsValid(value)) {
            set_type(static_cast< ::agent::CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_processID;
        break;
      }

      // required int32 processID = 2;
      case 2: {
        if (tag == 16) {
         parse_processID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processid_)));
          set_has_processid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_processName;
        break;
      }

      // optional string processName = 3;
      case 3: {
        if (tag == 26) {
         parse_processName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processname().data(), this->processname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "processname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scProcessCommandRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scProcessCommandRequest)
  return false;
#undef DO_
}

void scProcessCommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scProcessCommandRequest)
  // required .agent.CommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 processID = 2;
  if (has_processid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->processid(), output);
  }

  // optional string processName = 3;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->processname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scProcessCommandRequest)
}

::google::protobuf::uint8* scProcessCommandRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scProcessCommandRequest)
  // required .agent.CommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 processID = 2;
  if (has_processid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->processid(), target);
  }

  // optional string processName = 3;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->processname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scProcessCommandRequest)
  return target;
}

int scProcessCommandRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .agent.CommandType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 processID = 2;
    if (has_processid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processid());
    }

    // optional string processName = 3;
    if (has_processname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scProcessCommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scProcessCommandRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scProcessCommandRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scProcessCommandRequest::MergeFrom(const scProcessCommandRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_processid()) {
      set_processid(from.processid());
    }
    if (from.has_processname()) {
      set_processname(from.processname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scProcessCommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scProcessCommandRequest::CopyFrom(const scProcessCommandRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scProcessCommandRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void scProcessCommandRequest::Swap(scProcessCommandRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(processid_, other->processid_);
    std::swap(processname_, other->processname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scProcessCommandRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scProcessCommandRequest_descriptor_;
  metadata.reflection = scProcessCommandRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* csProcessCommandResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csProcessCommandResponse_Result_descriptor_;
}
bool csProcessCommandResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const csProcessCommandResponse_Result csProcessCommandResponse::SUCCESS;
const csProcessCommandResponse_Result csProcessCommandResponse::FAILURE;
const csProcessCommandResponse_Result csProcessCommandResponse::Result_MIN;
const csProcessCommandResponse_Result csProcessCommandResponse::Result_MAX;
const int csProcessCommandResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int csProcessCommandResponse::kTypeFieldNumber;
const int csProcessCommandResponse::kProcessIDFieldNumber;
const int csProcessCommandResponse::kResultFieldNumber;
const int csProcessCommandResponse::kFailReasonFieldNumber;
#endif  // !_MSC_VER

csProcessCommandResponse::csProcessCommandResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csProcessCommandResponse)
}

void csProcessCommandResponse::InitAsDefaultInstance() {
}

csProcessCommandResponse::csProcessCommandResponse(const csProcessCommandResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csProcessCommandResponse)
}

void csProcessCommandResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  processid_ = 0;
  result_ = 0;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csProcessCommandResponse::~csProcessCommandResponse() {
  // @@protoc_insertion_point(destructor:agent.csProcessCommandResponse)
  SharedDtor();
}

void csProcessCommandResponse::SharedDtor() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
  }
}

void csProcessCommandResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csProcessCommandResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csProcessCommandResponse_descriptor_;
}

const csProcessCommandResponse& csProcessCommandResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csProcessCommandResponse* csProcessCommandResponse::default_instance_ = NULL;

csProcessCommandResponse* csProcessCommandResponse::New() const {
  return new csProcessCommandResponse;
}

void csProcessCommandResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<csProcessCommandResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, processid_);
    result_ = 0;
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csProcessCommandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csProcessCommandResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .agent.CommandType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::CommandType_IsValid(value)) {
            set_type(static_cast< ::agent::CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_processID;
        break;
      }

      // required int32 processID = 2;
      case 2: {
        if (tag == 16) {
         parse_processID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processid_)));
          set_has_processid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required .agent.csProcessCommandResponse.Result result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::csProcessCommandResponse_Result_IsValid(value)) {
            set_result(static_cast< ::agent::csProcessCommandResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_failReason;
        break;
      }

      // optional string failReason = 4;
      case 4: {
        if (tag == 34) {
         parse_failReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csProcessCommandResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csProcessCommandResponse)
  return false;
#undef DO_
}

void csProcessCommandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csProcessCommandResponse)
  // required .agent.CommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 processID = 2;
  if (has_processid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->processid(), output);
  }

  // required .agent.csProcessCommandResponse.Result result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional string failReason = 4;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->failreason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csProcessCommandResponse)
}

::google::protobuf::uint8* csProcessCommandResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csProcessCommandResponse)
  // required .agent.CommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 processID = 2;
  if (has_processid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->processid(), target);
  }

  // required .agent.csProcessCommandResponse.Result result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional string failReason = 4;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->failreason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csProcessCommandResponse)
  return target;
}

int csProcessCommandResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .agent.CommandType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 processID = 2;
    if (has_processid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processid());
    }

    // required .agent.csProcessCommandResponse.Result result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string failReason = 4;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csProcessCommandResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csProcessCommandResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csProcessCommandResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csProcessCommandResponse::MergeFrom(const csProcessCommandResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_processid()) {
      set_processid(from.processid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csProcessCommandResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csProcessCommandResponse::CopyFrom(const csProcessCommandResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csProcessCommandResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void csProcessCommandResponse::Swap(csProcessCommandResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(processid_, other->processid_);
    std::swap(result_, other->result_);
    std::swap(failreason_, other->failreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csProcessCommandResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csProcessCommandResponse_descriptor_;
  metadata.reflection = csProcessCommandResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scProcessRestrictionRequest::kProcessIDFieldNumber;
const int scProcessRestrictionRequest::kTypeFieldNumber;
const int scProcessRestrictionRequest::kValue1FieldNumber;
const int scProcessRestrictionRequest::kValue2FieldNumber;
#endif  // !_MSC_VER

scProcessRestrictionRequest::scProcessRestrictionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scProcessRestrictionRequest)
}

void scProcessRestrictionRequest::InitAsDefaultInstance() {
}

scProcessRestrictionRequest::scProcessRestrictionRequest(const scProcessRestrictionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scProcessRestrictionRequest)
}

void scProcessRestrictionRequest::SharedCtor() {
  _cached_size_ = 0;
  processid_ = 0;
  type_ = 0;
  value1_ = 0;
  value2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scProcessRestrictionRequest::~scProcessRestrictionRequest() {
  // @@protoc_insertion_point(destructor:agent.scProcessRestrictionRequest)
  SharedDtor();
}

void scProcessRestrictionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scProcessRestrictionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scProcessRestrictionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scProcessRestrictionRequest_descriptor_;
}

const scProcessRestrictionRequest& scProcessRestrictionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scProcessRestrictionRequest* scProcessRestrictionRequest::default_instance_ = NULL;

scProcessRestrictionRequest* scProcessRestrictionRequest::New() const {
  return new scProcessRestrictionRequest;
}

void scProcessRestrictionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<scProcessRestrictionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(processid_, value2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scProcessRestrictionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scProcessRestrictionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 processID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processid_)));
          set_has_processid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .agent.Restriction type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::Restriction_IsValid(value)) {
            set_type(static_cast< ::agent::Restriction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value1;
        break;
      }

      // required int32 value1 = 3;
      case 3: {
        if (tag == 24) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value2;
        break;
      }

      // optional int32 value2 = 4;
      case 4: {
        if (tag == 32) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scProcessRestrictionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scProcessRestrictionRequest)
  return false;
#undef DO_
}

void scProcessRestrictionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scProcessRestrictionRequest)
  // required int32 processID = 1;
  if (has_processid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->processid(), output);
  }

  // required .agent.Restriction type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 value1 = 3;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value1(), output);
  }

  // optional int32 value2 = 4;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scProcessRestrictionRequest)
}

::google::protobuf::uint8* scProcessRestrictionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scProcessRestrictionRequest)
  // required int32 processID = 1;
  if (has_processid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->processid(), target);
  }

  // required .agent.Restriction type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 value1 = 3;
  if (has_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value1(), target);
  }

  // optional int32 value2 = 4;
  if (has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scProcessRestrictionRequest)
  return target;
}

int scProcessRestrictionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 processID = 1;
    if (has_processid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processid());
    }

    // required .agent.Restriction type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 value1 = 3;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value1());
    }

    // optional int32 value2 = 4;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scProcessRestrictionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scProcessRestrictionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scProcessRestrictionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scProcessRestrictionRequest::MergeFrom(const scProcessRestrictionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processid()) {
      set_processid(from.processid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scProcessRestrictionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scProcessRestrictionRequest::CopyFrom(const scProcessRestrictionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scProcessRestrictionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void scProcessRestrictionRequest::Swap(scProcessRestrictionRequest* other) {
  if (other != this) {
    std::swap(processid_, other->processid_);
    std::swap(type_, other->type_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scProcessRestrictionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scProcessRestrictionRequest_descriptor_;
  metadata.reflection = scProcessRestrictionRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* csProcessRestrictionResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csProcessRestrictionResponse_Result_descriptor_;
}
bool csProcessRestrictionResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const csProcessRestrictionResponse_Result csProcessRestrictionResponse::SUCCESS;
const csProcessRestrictionResponse_Result csProcessRestrictionResponse::FAILURE;
const csProcessRestrictionResponse_Result csProcessRestrictionResponse::Result_MIN;
const csProcessRestrictionResponse_Result csProcessRestrictionResponse::Result_MAX;
const int csProcessRestrictionResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int csProcessRestrictionResponse::kProcessIDFieldNumber;
const int csProcessRestrictionResponse::kTypeFieldNumber;
const int csProcessRestrictionResponse::kResultFieldNumber;
const int csProcessRestrictionResponse::kFailReasonFieldNumber;
#endif  // !_MSC_VER

csProcessRestrictionResponse::csProcessRestrictionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csProcessRestrictionResponse)
}

void csProcessRestrictionResponse::InitAsDefaultInstance() {
}

csProcessRestrictionResponse::csProcessRestrictionResponse(const csProcessRestrictionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csProcessRestrictionResponse)
}

void csProcessRestrictionResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  processid_ = 0;
  type_ = 0;
  result_ = 0;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csProcessRestrictionResponse::~csProcessRestrictionResponse() {
  // @@protoc_insertion_point(destructor:agent.csProcessRestrictionResponse)
  SharedDtor();
}

void csProcessRestrictionResponse::SharedDtor() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
  }
}

void csProcessRestrictionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csProcessRestrictionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csProcessRestrictionResponse_descriptor_;
}

const csProcessRestrictionResponse& csProcessRestrictionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csProcessRestrictionResponse* csProcessRestrictionResponse::default_instance_ = NULL;

csProcessRestrictionResponse* csProcessRestrictionResponse::New() const {
  return new csProcessRestrictionResponse;
}

void csProcessRestrictionResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<csProcessRestrictionResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(processid_, type_);
    result_ = 0;
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csProcessRestrictionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csProcessRestrictionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 processID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processid_)));
          set_has_processid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .agent.Restriction type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::Restriction_IsValid(value)) {
            set_type(static_cast< ::agent::Restriction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required .agent.csProcessRestrictionResponse.Result result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::csProcessRestrictionResponse_Result_IsValid(value)) {
            set_result(static_cast< ::agent::csProcessRestrictionResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_failReason;
        break;
      }

      // optional string failReason = 4;
      case 4: {
        if (tag == 34) {
         parse_failReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csProcessRestrictionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csProcessRestrictionResponse)
  return false;
#undef DO_
}

void csProcessRestrictionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csProcessRestrictionResponse)
  // required int32 processID = 1;
  if (has_processid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->processid(), output);
  }

  // required .agent.Restriction type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .agent.csProcessRestrictionResponse.Result result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional string failReason = 4;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->failreason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csProcessRestrictionResponse)
}

::google::protobuf::uint8* csProcessRestrictionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csProcessRestrictionResponse)
  // required int32 processID = 1;
  if (has_processid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->processid(), target);
  }

  // required .agent.Restriction type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .agent.csProcessRestrictionResponse.Result result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional string failReason = 4;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->failreason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csProcessRestrictionResponse)
  return target;
}

int csProcessRestrictionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 processID = 1;
    if (has_processid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processid());
    }

    // required .agent.Restriction type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .agent.csProcessRestrictionResponse.Result result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string failReason = 4;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csProcessRestrictionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csProcessRestrictionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csProcessRestrictionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csProcessRestrictionResponse::MergeFrom(const csProcessRestrictionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processid()) {
      set_processid(from.processid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csProcessRestrictionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csProcessRestrictionResponse::CopyFrom(const csProcessRestrictionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csProcessRestrictionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void csProcessRestrictionResponse::Swap(csProcessRestrictionResponse* other) {
  if (other != this) {
    std::swap(processid_, other->processid_);
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(failreason_, other->failreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csProcessRestrictionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csProcessRestrictionResponse_descriptor_;
  metadata.reflection = csProcessRestrictionResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace agent

// @@protoc_insertion_point(global_scope)
