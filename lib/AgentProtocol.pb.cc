// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AgentProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AgentProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace agent {

namespace {

const ::google::protobuf::Descriptor* csAgentIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csAgentIDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* scAgentIDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scAgentIDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* csProcessListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csProcessListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* scProcessListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scProcessListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* csCounterListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csCounterListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* scCounterListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scCounterListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* csAgentReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csAgentReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* csCurrentProcessListSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csCurrentProcessListSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* scHealthCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scHealthCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* csHealthAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csHealthAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* scProcessCommandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scProcessCommandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* csProcessCommandResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csProcessCommandResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* csProcessCommandResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* scCounterCommandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scCounterCommandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* csCounterCommandResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csCounterCommandResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* csCounterCommandResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* scStartRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scStartRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* scStopRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scStopRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* Log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Log_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* csTotalProcessInfoSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csTotalProcessInfoSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* MachineInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* csTotalMachineInfoSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csTotalMachineInfoSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* scProcessRestrictionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scProcessRestrictionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* csProcessRestrictionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csProcessRestrictionResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* csProcessRestrictionResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* csRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csRecordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* csRecordResponse_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* agentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProcessCommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CounterCommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Restriction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AgentProtocol_2eproto() {
  protobuf_AddDesc_AgentProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AgentProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  csAgentIDRequest_descriptor_ = file->message_type(0);
  static const int csAgentIDRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csAgentIDRequest, hostip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csAgentIDRequest, ramsize_),
  };
  csAgentIDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csAgentIDRequest_descriptor_,
      csAgentIDRequest::default_instance_,
      csAgentIDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csAgentIDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csAgentIDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csAgentIDRequest));
  scAgentIDResponse_descriptor_ = file->message_type(1);
  static const int scAgentIDResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scAgentIDResponse, agentid_),
  };
  scAgentIDResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scAgentIDResponse_descriptor_,
      scAgentIDResponse::default_instance_,
      scAgentIDResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scAgentIDResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scAgentIDResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scAgentIDResponse));
  csProcessListRequest_descriptor_ = file->message_type(2);
  static const int csProcessListRequest_offsets_[1] = {
  };
  csProcessListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csProcessListRequest_descriptor_,
      csProcessListRequest::default_instance_,
      csProcessListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csProcessListRequest));
  scProcessListResponse_descriptor_ = file->message_type(3);
  static const int scProcessListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessListResponse, processname_),
  };
  scProcessListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scProcessListResponse_descriptor_,
      scProcessListResponse::default_instance_,
      scProcessListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scProcessListResponse));
  csCounterListRequest_descriptor_ = file->message_type(4);
  static const int csCounterListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCounterListRequest, ismachine_),
  };
  csCounterListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csCounterListRequest_descriptor_,
      csCounterListRequest::default_instance_,
      csCounterListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCounterListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCounterListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csCounterListRequest));
  scCounterListResponse_descriptor_ = file->message_type(5);
  static const int scCounterListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scCounterListResponse, ismachine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scCounterListResponse, countername_),
  };
  scCounterListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scCounterListResponse_descriptor_,
      scCounterListResponse::default_instance_,
      scCounterListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scCounterListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scCounterListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scCounterListResponse));
  csAgentReady_descriptor_ = file->message_type(6);
  static const int csAgentReady_offsets_[1] = {
  };
  csAgentReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csAgentReady_descriptor_,
      csAgentReady::default_instance_,
      csAgentReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csAgentReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csAgentReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csAgentReady));
  CurrentProcess_descriptor_ = file->message_type(7);
  static const int CurrentProcess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentProcess, processname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentProcess, processid_),
  };
  CurrentProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentProcess_descriptor_,
      CurrentProcess::default_instance_,
      CurrentProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentProcess));
  csCurrentProcessListSend_descriptor_ = file->message_type(8);
  static const int csCurrentProcessListSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCurrentProcessListSend, processinfo_),
  };
  csCurrentProcessListSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csCurrentProcessListSend_descriptor_,
      csCurrentProcessListSend::default_instance_,
      csCurrentProcessListSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCurrentProcessListSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCurrentProcessListSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csCurrentProcessListSend));
  scHealthCheck_descriptor_ = file->message_type(9);
  static const int scHealthCheck_offsets_[1] = {
  };
  scHealthCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scHealthCheck_descriptor_,
      scHealthCheck::default_instance_,
      scHealthCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scHealthCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scHealthCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scHealthCheck));
  csHealthAck_descriptor_ = file->message_type(10);
  static const int csHealthAck_offsets_[1] = {
  };
  csHealthAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csHealthAck_descriptor_,
      csHealthAck::default_instance_,
      csHealthAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csHealthAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csHealthAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csHealthAck));
  scProcessCommandRequest_descriptor_ = file->message_type(11);
  static const int scProcessCommandRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessCommandRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessCommandRequest, processname_),
  };
  scProcessCommandRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scProcessCommandRequest_descriptor_,
      scProcessCommandRequest::default_instance_,
      scProcessCommandRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessCommandRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessCommandRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scProcessCommandRequest));
  csProcessCommandResponse_descriptor_ = file->message_type(12);
  static const int csProcessCommandResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessCommandResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessCommandResponse, processid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessCommandResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessCommandResponse, failreason_),
  };
  csProcessCommandResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csProcessCommandResponse_descriptor_,
      csProcessCommandResponse::default_instance_,
      csProcessCommandResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessCommandResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessCommandResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csProcessCommandResponse));
  csProcessCommandResponse_Result_descriptor_ = csProcessCommandResponse_descriptor_->enum_type(0);
  scCounterCommandRequest_descriptor_ = file->message_type(13);
  static const int scCounterCommandRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scCounterCommandRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scCounterCommandRequest, countername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scCounterCommandRequest, ismachine_),
  };
  scCounterCommandRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scCounterCommandRequest_descriptor_,
      scCounterCommandRequest::default_instance_,
      scCounterCommandRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scCounterCommandRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scCounterCommandRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scCounterCommandRequest));
  csCounterCommandResponse_descriptor_ = file->message_type(14);
  static const int csCounterCommandResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCounterCommandResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCounterCommandResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCounterCommandResponse, failreason_),
  };
  csCounterCommandResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csCounterCommandResponse_descriptor_,
      csCounterCommandResponse::default_instance_,
      csCounterCommandResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCounterCommandResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCounterCommandResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csCounterCommandResponse));
  csCounterCommandResponse_Result_descriptor_ = csCounterCommandResponse_descriptor_->enum_type(0);
  scStartRecord_descriptor_ = file->message_type(15);
  static const int scStartRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scStartRecord, ismachine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scStartRecord, totalrecordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scStartRecord, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scStartRecord, responsetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scStartRecord, delay_),
  };
  scStartRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scStartRecord_descriptor_,
      scStartRecord::default_instance_,
      scStartRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scStartRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scStartRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scStartRecord));
  scStopRecord_descriptor_ = file->message_type(16);
  static const int scStopRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scStopRecord, ismachine_),
  };
  scStopRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scStopRecord_descriptor_,
      scStopRecord::default_instance_,
      scStopRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scStopRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scStopRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scStopRecord));
  Log_descriptor_ = file->message_type(17);
  static const int Log_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, value_),
  };
  Log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Log_descriptor_,
      Log::default_instance_,
      Log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Log));
  ProcessInfos_descriptor_ = file->message_type(18);
  static const int ProcessInfos_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfos, countername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfos, processname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfos, processid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfos, logs_),
  };
  ProcessInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessInfos_descriptor_,
      ProcessInfos::default_instance_,
      ProcessInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessInfos));
  csTotalProcessInfoSend_descriptor_ = file->message_type(19);
  static const int csTotalProcessInfoSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csTotalProcessInfoSend, info_),
  };
  csTotalProcessInfoSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csTotalProcessInfoSend_descriptor_,
      csTotalProcessInfoSend::default_instance_,
      csTotalProcessInfoSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csTotalProcessInfoSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csTotalProcessInfoSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csTotalProcessInfoSend));
  MachineInfos_descriptor_ = file->message_type(20);
  static const int MachineInfos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfos, countername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfos, logs_),
  };
  MachineInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineInfos_descriptor_,
      MachineInfos::default_instance_,
      MachineInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineInfos));
  csTotalMachineInfoSend_descriptor_ = file->message_type(21);
  static const int csTotalMachineInfoSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csTotalMachineInfoSend, info_),
  };
  csTotalMachineInfoSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csTotalMachineInfoSend_descriptor_,
      csTotalMachineInfoSend::default_instance_,
      csTotalMachineInfoSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csTotalMachineInfoSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csTotalMachineInfoSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csTotalMachineInfoSend));
  scProcessRestrictionRequest_descriptor_ = file->message_type(22);
  static const int scProcessRestrictionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessRestrictionRequest, processid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessRestrictionRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessRestrictionRequest, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessRestrictionRequest, value2_),
  };
  scProcessRestrictionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scProcessRestrictionRequest_descriptor_,
      scProcessRestrictionRequest::default_instance_,
      scProcessRestrictionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessRestrictionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scProcessRestrictionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scProcessRestrictionRequest));
  csProcessRestrictionResponse_descriptor_ = file->message_type(23);
  static const int csProcessRestrictionResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessRestrictionResponse, processid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessRestrictionResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessRestrictionResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessRestrictionResponse, failreason_),
  };
  csProcessRestrictionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csProcessRestrictionResponse_descriptor_,
      csProcessRestrictionResponse::default_instance_,
      csProcessRestrictionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessRestrictionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csProcessRestrictionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csProcessRestrictionResponse));
  csProcessRestrictionResponse_Result_descriptor_ = csProcessRestrictionResponse_descriptor_->enum_type(0);
  csRecordResponse_descriptor_ = file->message_type(24);
  static const int csRecordResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csRecordResponse, ismachine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csRecordResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csRecordResponse, failreason_),
  };
  csRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csRecordResponse_descriptor_,
      csRecordResponse::default_instance_,
      csRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csRecordResponse));
  csRecordResponse_Result_descriptor_ = csRecordResponse_descriptor_->enum_type(0);
  agentType_descriptor_ = file->enum_type(0);
  ProcessCommandType_descriptor_ = file->enum_type(1);
  CounterCommandType_descriptor_ = file->enum_type(2);
  Restriction_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AgentProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csAgentIDRequest_descriptor_, &csAgentIDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scAgentIDResponse_descriptor_, &scAgentIDResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csProcessListRequest_descriptor_, &csProcessListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scProcessListResponse_descriptor_, &scProcessListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csCounterListRequest_descriptor_, &csCounterListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scCounterListResponse_descriptor_, &scCounterListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csAgentReady_descriptor_, &csAgentReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentProcess_descriptor_, &CurrentProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csCurrentProcessListSend_descriptor_, &csCurrentProcessListSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scHealthCheck_descriptor_, &scHealthCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csHealthAck_descriptor_, &csHealthAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scProcessCommandRequest_descriptor_, &scProcessCommandRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csProcessCommandResponse_descriptor_, &csProcessCommandResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scCounterCommandRequest_descriptor_, &scCounterCommandRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csCounterCommandResponse_descriptor_, &csCounterCommandResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scStartRecord_descriptor_, &scStartRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scStopRecord_descriptor_, &scStopRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Log_descriptor_, &Log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessInfos_descriptor_, &ProcessInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csTotalProcessInfoSend_descriptor_, &csTotalProcessInfoSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineInfos_descriptor_, &MachineInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csTotalMachineInfoSend_descriptor_, &csTotalMachineInfoSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scProcessRestrictionRequest_descriptor_, &scProcessRestrictionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csProcessRestrictionResponse_descriptor_, &csProcessRestrictionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csRecordResponse_descriptor_, &csRecordResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AgentProtocol_2eproto() {
  delete csAgentIDRequest::default_instance_;
  delete csAgentIDRequest_reflection_;
  delete scAgentIDResponse::default_instance_;
  delete scAgentIDResponse_reflection_;
  delete csProcessListRequest::default_instance_;
  delete csProcessListRequest_reflection_;
  delete scProcessListResponse::default_instance_;
  delete scProcessListResponse_reflection_;
  delete csCounterListRequest::default_instance_;
  delete csCounterListRequest_reflection_;
  delete scCounterListResponse::default_instance_;
  delete scCounterListResponse_reflection_;
  delete csAgentReady::default_instance_;
  delete csAgentReady_reflection_;
  delete CurrentProcess::default_instance_;
  delete CurrentProcess_reflection_;
  delete csCurrentProcessListSend::default_instance_;
  delete csCurrentProcessListSend_reflection_;
  delete scHealthCheck::default_instance_;
  delete scHealthCheck_reflection_;
  delete csHealthAck::default_instance_;
  delete csHealthAck_reflection_;
  delete scProcessCommandRequest::default_instance_;
  delete scProcessCommandRequest_reflection_;
  delete csProcessCommandResponse::default_instance_;
  delete csProcessCommandResponse_reflection_;
  delete scCounterCommandRequest::default_instance_;
  delete scCounterCommandRequest_reflection_;
  delete csCounterCommandResponse::default_instance_;
  delete csCounterCommandResponse_reflection_;
  delete scStartRecord::default_instance_;
  delete scStartRecord_reflection_;
  delete scStopRecord::default_instance_;
  delete scStopRecord_reflection_;
  delete Log::default_instance_;
  delete Log_reflection_;
  delete ProcessInfos::default_instance_;
  delete ProcessInfos_reflection_;
  delete csTotalProcessInfoSend::default_instance_;
  delete csTotalProcessInfoSend_reflection_;
  delete MachineInfos::default_instance_;
  delete MachineInfos_reflection_;
  delete csTotalMachineInfoSend::default_instance_;
  delete csTotalMachineInfoSend_reflection_;
  delete scProcessRestrictionRequest::default_instance_;
  delete scProcessRestrictionRequest_reflection_;
  delete csProcessRestrictionResponse::default_instance_;
  delete csProcessRestrictionResponse_reflection_;
  delete csRecordResponse::default_instance_;
  delete csRecordResponse_reflection_;
}

void protobuf_AddDesc_AgentProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023AgentProtocol.proto\022\005agent\"3\n\020csAgentI"
    "DRequest\022\016\n\006hostIP\030\001 \002(\005\022\017\n\007ramSize\030\002 \002("
    "\001\"$\n\021scAgentIDResponse\022\017\n\007agentID\030\001 \002(\005\""
    "\026\n\024csProcessListRequest\",\n\025scProcessList"
    "Response\022\023\n\013processName\030\001 \003(\t\")\n\024csCount"
    "erListRequest\022\021\n\tisMachine\030\001 \002(\010\"\?\n\025scCo"
    "unterListResponse\022\021\n\tisMachine\030\001 \002(\010\022\023\n\013"
    "counterName\030\002 \003(\t\"\016\n\014csAgentReady\"8\n\016Cur"
    "rentProcess\022\023\n\013processName\030\001 \002(\t\022\021\n\tproc"
    "essID\030\002 \003(\005\"F\n\030csCurrentProcessListSend\022"
    "*\n\013processInfo\030\001 \003(\0132\025.agent.CurrentProc"
    "ess\"\017\n\rscHealthCheck\"\r\n\013csHealthAck\"W\n\027s"
    "cProcessCommandRequest\022\'\n\004type\030\001 \002(\0162\031.a"
    "gent.ProcessCommandType\022\023\n\013processName\030\002"
    " \002(\t\"\306\001\n\030csProcessCommandResponse\022\'\n\004typ"
    "e\030\001 \002(\0162\031.agent.ProcessCommandType\022\021\n\tpr"
    "ocessID\030\002 \003(\005\0226\n\006result\030\003 \002(\0162&.agent.cs"
    "ProcessCommandResponse.Result\022\022\n\nfailRea"
    "son\030\004 \001(\t\"\"\n\006Result\022\013\n\007SUCCESS\020\000\022\013\n\007FAIL"
    "URE\020\001\"j\n\027scCounterCommandRequest\022\'\n\004type"
    "\030\001 \002(\0162\031.agent.CounterCommandType\022\023\n\013Cou"
    "nterName\030\002 \002(\t\022\021\n\tisMachine\030\003 \002(\010\"\263\001\n\030cs"
    "CounterCommandResponse\022\'\n\004type\030\001 \002(\0162\031.a"
    "gent.CounterCommandType\0226\n\006result\030\003 \002(\0162"
    "&.agent.csCounterCommandResponse.Result\022"
    "\022\n\nfailReason\030\004 \001(\t\"\"\n\006Result\022\013\n\007SUCCESS"
    "\020\000\022\013\n\007FAILURE\020\001\"r\n\rscStartRecord\022\021\n\tisMa"
    "chine\030\005 \002(\010\022\027\n\017totalRecordTime\030\001 \002(\005\022\020\n\010"
    "interval\030\002 \002(\005\022\024\n\014responseTime\030\003 \002(\005\022\r\n\005"
    "delay\030\004 \001(\003\"!\n\014scStopRecord\022\021\n\tisMachine"
    "\030\001 \002(\010\"\'\n\003Log\022\021\n\ttimeStamp\030\001 \002(\003\022\r\n\005valu"
    "e\030\002 \002(\001\"e\n\014ProcessInfos\022\023\n\013counterName\030\001"
    " \002(\t\022\023\n\013processName\030\002 \002(\t\022\021\n\tprocessID\030\003"
    " \002(\005\022\030\n\004logs\030\004 \003(\0132\n.agent.Log\";\n\026csTota"
    "lProcessInfoSend\022!\n\004info\030\001 \003(\0132\023.agent.P"
    "rocessInfos\"=\n\014MachineInfos\022\023\n\013counterNa"
    "me\030\001 \002(\t\022\030\n\004logs\030\002 \003(\0132\n.agent.Log\";\n\026cs"
    "TotalMachineInfoSend\022!\n\004info\030\001 \003(\0132\023.age"
    "nt.MachineInfos\"r\n\033scProcessRestrictionR"
    "equest\022\021\n\tprocessID\030\001 \002(\005\022 \n\004type\030\002 \002(\0162"
    "\022.agent.Restriction\022\016\n\006value1\030\003 \002(\005\022\016\n\006v"
    "alue2\030\004 \001(\005\"\307\001\n\034csProcessRestrictionResp"
    "onse\022\021\n\tprocessID\030\001 \002(\005\022 \n\004type\030\002 \002(\0162\022."
    "agent.Restriction\022:\n\006result\030\003 \002(\0162*.agen"
    "t.csProcessRestrictionResponse.Result\022\022\n"
    "\nfailReason\030\004 \001(\t\"\"\n\006Result\022\013\n\007SUCCESS\020\000"
    "\022\013\n\007FAILURE\020\001\"\275\001\n\020csRecordResponse\022\021\n\tis"
    "Machine\030\005 \002(\010\022.\n\006result\030\003 \002(\0162\036.agent.cs"
    "RecordResponse.Result\022\022\n\nfailReason\030\004 \001("
    "\t\"R\n\006Result\022\021\n\rSTART_SUCCESS\020\000\022\021\n\rSTART_"
    "FAILURE\020\001\022\020\n\014STOP_SUCCESS\020\002\022\020\n\014STOP_FAIL"
    "URE\020\003*\356\003\n\tagentType\022\022\n\016AgentIDRequest\020\000\022"
    "\023\n\017AgentIDResponse\020\001\022\026\n\022ProcessListReque"
    "st\020\002\022\027\n\023ProcessListResponse\020\003\022\026\n\022Counter"
    "ListRequest\020\004\022\027\n\023CounterListResponse\020\005\022\032"
    "\n\026CurrentProcessListSend\020\006\022\017\n\013HealthChec"
    "k\020\010\022\r\n\tHealthAck\020\t\022\031\n\025ProcessCommandRequ"
    "est\020\n\022\032\n\026ProcessCommandResponse\020\013\022\031\n\025Cou"
    "nterCommandRequest\020\014\022\032\n\026CounterCommandRe"
    "sponse\020\r\022\035\n\031ProcessRestrictionRequest\020\016\022"
    "\036\n\032ProcessRestrictionResponse\020\017\022\017\n\013Start"
    "Record\020\020\022\016\n\nStopRecord\020\021\022\023\n\017ProcessInfoS"
    "end\020\022\022\023\n\017MachineInfoSend\020\025\022\016\n\nAgentReady"
    "\020\026\022\022\n\016RecordResponse\020\027*`\n\022ProcessCommand"
    "Type\022\t\n\005START\020\000\022\013\n\007RESTART\020\001\022\010\n\004STOP\020\002\022\013"
    "\n\007ADDLIST\020\003\022\016\n\nDELETELIST\020\004\022\013\n\007ALLSTOP\020\005"
    "*3\n\022CounterCommandType\022\014\n\010CADDLIST\020\001\022\017\n\013"
    "CDELETELIST\020\002*V\n\013Restriction\022\023\n\017USER_TIM"
    "E_LIMIT\020\000\022\030\n\024MAX_WORKING_SET_SIZE\020\001\022\030\n\024M"
    "IN_WORKING_SET_SIZE\020\002", 2781);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AgentProtocol.proto", &protobuf_RegisterTypes);
  csAgentIDRequest::default_instance_ = new csAgentIDRequest();
  scAgentIDResponse::default_instance_ = new scAgentIDResponse();
  csProcessListRequest::default_instance_ = new csProcessListRequest();
  scProcessListResponse::default_instance_ = new scProcessListResponse();
  csCounterListRequest::default_instance_ = new csCounterListRequest();
  scCounterListResponse::default_instance_ = new scCounterListResponse();
  csAgentReady::default_instance_ = new csAgentReady();
  CurrentProcess::default_instance_ = new CurrentProcess();
  csCurrentProcessListSend::default_instance_ = new csCurrentProcessListSend();
  scHealthCheck::default_instance_ = new scHealthCheck();
  csHealthAck::default_instance_ = new csHealthAck();
  scProcessCommandRequest::default_instance_ = new scProcessCommandRequest();
  csProcessCommandResponse::default_instance_ = new csProcessCommandResponse();
  scCounterCommandRequest::default_instance_ = new scCounterCommandRequest();
  csCounterCommandResponse::default_instance_ = new csCounterCommandResponse();
  scStartRecord::default_instance_ = new scStartRecord();
  scStopRecord::default_instance_ = new scStopRecord();
  Log::default_instance_ = new Log();
  ProcessInfos::default_instance_ = new ProcessInfos();
  csTotalProcessInfoSend::default_instance_ = new csTotalProcessInfoSend();
  MachineInfos::default_instance_ = new MachineInfos();
  csTotalMachineInfoSend::default_instance_ = new csTotalMachineInfoSend();
  scProcessRestrictionRequest::default_instance_ = new scProcessRestrictionRequest();
  csProcessRestrictionResponse::default_instance_ = new csProcessRestrictionResponse();
  csRecordResponse::default_instance_ = new csRecordResponse();
  csAgentIDRequest::default_instance_->InitAsDefaultInstance();
  scAgentIDResponse::default_instance_->InitAsDefaultInstance();
  csProcessListRequest::default_instance_->InitAsDefaultInstance();
  scProcessListResponse::default_instance_->InitAsDefaultInstance();
  csCounterListRequest::default_instance_->InitAsDefaultInstance();
  scCounterListResponse::default_instance_->InitAsDefaultInstance();
  csAgentReady::default_instance_->InitAsDefaultInstance();
  CurrentProcess::default_instance_->InitAsDefaultInstance();
  csCurrentProcessListSend::default_instance_->InitAsDefaultInstance();
  scHealthCheck::default_instance_->InitAsDefaultInstance();
  csHealthAck::default_instance_->InitAsDefaultInstance();
  scProcessCommandRequest::default_instance_->InitAsDefaultInstance();
  csProcessCommandResponse::default_instance_->InitAsDefaultInstance();
  scCounterCommandRequest::default_instance_->InitAsDefaultInstance();
  csCounterCommandResponse::default_instance_->InitAsDefaultInstance();
  scStartRecord::default_instance_->InitAsDefaultInstance();
  scStopRecord::default_instance_->InitAsDefaultInstance();
  Log::default_instance_->InitAsDefaultInstance();
  ProcessInfos::default_instance_->InitAsDefaultInstance();
  csTotalProcessInfoSend::default_instance_->InitAsDefaultInstance();
  MachineInfos::default_instance_->InitAsDefaultInstance();
  csTotalMachineInfoSend::default_instance_->InitAsDefaultInstance();
  scProcessRestrictionRequest::default_instance_->InitAsDefaultInstance();
  csProcessRestrictionResponse::default_instance_->InitAsDefaultInstance();
  csRecordResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AgentProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AgentProtocol_2eproto {
  StaticDescriptorInitializer_AgentProtocol_2eproto() {
    protobuf_AddDesc_AgentProtocol_2eproto();
  }
} static_descriptor_initializer_AgentProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* agentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agentType_descriptor_;
}
bool agentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProcessCommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessCommandType_descriptor_;
}
bool ProcessCommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CounterCommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterCommandType_descriptor_;
}
bool CounterCommandType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Restriction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Restriction_descriptor_;
}
bool Restriction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int csAgentIDRequest::kHostIPFieldNumber;
const int csAgentIDRequest::kRamSizeFieldNumber;
#endif  // !_MSC_VER

csAgentIDRequest::csAgentIDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csAgentIDRequest)
}

void csAgentIDRequest::InitAsDefaultInstance() {
}

csAgentIDRequest::csAgentIDRequest(const csAgentIDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csAgentIDRequest)
}

void csAgentIDRequest::SharedCtor() {
  _cached_size_ = 0;
  hostip_ = 0;
  ramsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csAgentIDRequest::~csAgentIDRequest() {
  // @@protoc_insertion_point(destructor:agent.csAgentIDRequest)
  SharedDtor();
}

void csAgentIDRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csAgentIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csAgentIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csAgentIDRequest_descriptor_;
}

const csAgentIDRequest& csAgentIDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csAgentIDRequest* csAgentIDRequest::default_instance_ = NULL;

csAgentIDRequest* csAgentIDRequest::New() const {
  return new csAgentIDRequest;
}

void csAgentIDRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<csAgentIDRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ramsize_, hostip_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csAgentIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csAgentIDRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hostIP = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hostip_)));
          set_has_hostip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ramSize;
        break;
      }

      // required double ramSize = 2;
      case 2: {
        if (tag == 17) {
         parse_ramSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ramsize_)));
          set_has_ramsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csAgentIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csAgentIDRequest)
  return false;
#undef DO_
}

void csAgentIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csAgentIDRequest)
  // required int32 hostIP = 1;
  if (has_hostip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hostip(), output);
  }

  // required double ramSize = 2;
  if (has_ramsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ramsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csAgentIDRequest)
}

::google::protobuf::uint8* csAgentIDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csAgentIDRequest)
  // required int32 hostIP = 1;
  if (has_hostip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hostip(), target);
  }

  // required double ramSize = 2;
  if (has_ramsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ramsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csAgentIDRequest)
  return target;
}

int csAgentIDRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hostIP = 1;
    if (has_hostip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hostip());
    }

    // required double ramSize = 2;
    if (has_ramsize()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csAgentIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csAgentIDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csAgentIDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csAgentIDRequest::MergeFrom(const csAgentIDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostip()) {
      set_hostip(from.hostip());
    }
    if (from.has_ramsize()) {
      set_ramsize(from.ramsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csAgentIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csAgentIDRequest::CopyFrom(const csAgentIDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csAgentIDRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void csAgentIDRequest::Swap(csAgentIDRequest* other) {
  if (other != this) {
    std::swap(hostip_, other->hostip_);
    std::swap(ramsize_, other->ramsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csAgentIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csAgentIDRequest_descriptor_;
  metadata.reflection = csAgentIDRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scAgentIDResponse::kAgentIDFieldNumber;
#endif  // !_MSC_VER

scAgentIDResponse::scAgentIDResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scAgentIDResponse)
}

void scAgentIDResponse::InitAsDefaultInstance() {
}

scAgentIDResponse::scAgentIDResponse(const scAgentIDResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scAgentIDResponse)
}

void scAgentIDResponse::SharedCtor() {
  _cached_size_ = 0;
  agentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scAgentIDResponse::~scAgentIDResponse() {
  // @@protoc_insertion_point(destructor:agent.scAgentIDResponse)
  SharedDtor();
}

void scAgentIDResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scAgentIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scAgentIDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scAgentIDResponse_descriptor_;
}

const scAgentIDResponse& scAgentIDResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scAgentIDResponse* scAgentIDResponse::default_instance_ = NULL;

scAgentIDResponse* scAgentIDResponse::New() const {
  return new scAgentIDResponse;
}

void scAgentIDResponse::Clear() {
  agentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scAgentIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scAgentIDResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 agentID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agentid_)));
          set_has_agentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scAgentIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scAgentIDResponse)
  return false;
#undef DO_
}

void scAgentIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scAgentIDResponse)
  // required int32 agentID = 1;
  if (has_agentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->agentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scAgentIDResponse)
}

::google::protobuf::uint8* scAgentIDResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scAgentIDResponse)
  // required int32 agentID = 1;
  if (has_agentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->agentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scAgentIDResponse)
  return target;
}

int scAgentIDResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 agentID = 1;
    if (has_agentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scAgentIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scAgentIDResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scAgentIDResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scAgentIDResponse::MergeFrom(const scAgentIDResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agentid()) {
      set_agentid(from.agentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scAgentIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scAgentIDResponse::CopyFrom(const scAgentIDResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scAgentIDResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void scAgentIDResponse::Swap(scAgentIDResponse* other) {
  if (other != this) {
    std::swap(agentid_, other->agentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scAgentIDResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scAgentIDResponse_descriptor_;
  metadata.reflection = scAgentIDResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

csProcessListRequest::csProcessListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csProcessListRequest)
}

void csProcessListRequest::InitAsDefaultInstance() {
}

csProcessListRequest::csProcessListRequest(const csProcessListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csProcessListRequest)
}

void csProcessListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csProcessListRequest::~csProcessListRequest() {
  // @@protoc_insertion_point(destructor:agent.csProcessListRequest)
  SharedDtor();
}

void csProcessListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csProcessListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csProcessListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csProcessListRequest_descriptor_;
}

const csProcessListRequest& csProcessListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csProcessListRequest* csProcessListRequest::default_instance_ = NULL;

csProcessListRequest* csProcessListRequest::New() const {
  return new csProcessListRequest;
}

void csProcessListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csProcessListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csProcessListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csProcessListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csProcessListRequest)
  return false;
#undef DO_
}

void csProcessListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csProcessListRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csProcessListRequest)
}

::google::protobuf::uint8* csProcessListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csProcessListRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csProcessListRequest)
  return target;
}

int csProcessListRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csProcessListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csProcessListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csProcessListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csProcessListRequest::MergeFrom(const csProcessListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csProcessListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csProcessListRequest::CopyFrom(const csProcessListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csProcessListRequest::IsInitialized() const {

  return true;
}

void csProcessListRequest::Swap(csProcessListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csProcessListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csProcessListRequest_descriptor_;
  metadata.reflection = csProcessListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scProcessListResponse::kProcessNameFieldNumber;
#endif  // !_MSC_VER

scProcessListResponse::scProcessListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scProcessListResponse)
}

void scProcessListResponse::InitAsDefaultInstance() {
}

scProcessListResponse::scProcessListResponse(const scProcessListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scProcessListResponse)
}

void scProcessListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scProcessListResponse::~scProcessListResponse() {
  // @@protoc_insertion_point(destructor:agent.scProcessListResponse)
  SharedDtor();
}

void scProcessListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scProcessListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scProcessListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scProcessListResponse_descriptor_;
}

const scProcessListResponse& scProcessListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scProcessListResponse* scProcessListResponse::default_instance_ = NULL;

scProcessListResponse* scProcessListResponse::New() const {
  return new scProcessListResponse;
}

void scProcessListResponse::Clear() {
  processname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scProcessListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scProcessListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string processName = 1;
      case 1: {
        if (tag == 10) {
         parse_processName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_processname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processname(this->processname_size() - 1).data(),
            this->processname(this->processname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "processname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_processName;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scProcessListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scProcessListResponse)
  return false;
#undef DO_
}

void scProcessListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scProcessListResponse)
  // repeated string processName = 1;
  for (int i = 0; i < this->processname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->processname(i).data(), this->processname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "processname");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->processname(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scProcessListResponse)
}

::google::protobuf::uint8* scProcessListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scProcessListResponse)
  // repeated string processName = 1;
  for (int i = 0; i < this->processname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname(i).data(), this->processname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->processname(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scProcessListResponse)
  return target;
}

int scProcessListResponse::ByteSize() const {
  int total_size = 0;

  // repeated string processName = 1;
  total_size += 1 * this->processname_size();
  for (int i = 0; i < this->processname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->processname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scProcessListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scProcessListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scProcessListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scProcessListResponse::MergeFrom(const scProcessListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  processname_.MergeFrom(from.processname_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scProcessListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scProcessListResponse::CopyFrom(const scProcessListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scProcessListResponse::IsInitialized() const {

  return true;
}

void scProcessListResponse::Swap(scProcessListResponse* other) {
  if (other != this) {
    processname_.Swap(&other->processname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scProcessListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scProcessListResponse_descriptor_;
  metadata.reflection = scProcessListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int csCounterListRequest::kIsMachineFieldNumber;
#endif  // !_MSC_VER

csCounterListRequest::csCounterListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csCounterListRequest)
}

void csCounterListRequest::InitAsDefaultInstance() {
}

csCounterListRequest::csCounterListRequest(const csCounterListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csCounterListRequest)
}

void csCounterListRequest::SharedCtor() {
  _cached_size_ = 0;
  ismachine_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csCounterListRequest::~csCounterListRequest() {
  // @@protoc_insertion_point(destructor:agent.csCounterListRequest)
  SharedDtor();
}

void csCounterListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csCounterListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csCounterListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csCounterListRequest_descriptor_;
}

const csCounterListRequest& csCounterListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csCounterListRequest* csCounterListRequest::default_instance_ = NULL;

csCounterListRequest* csCounterListRequest::New() const {
  return new csCounterListRequest;
}

void csCounterListRequest::Clear() {
  ismachine_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csCounterListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csCounterListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isMachine = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismachine_)));
          set_has_ismachine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csCounterListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csCounterListRequest)
  return false;
#undef DO_
}

void csCounterListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csCounterListRequest)
  // required bool isMachine = 1;
  if (has_ismachine()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ismachine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csCounterListRequest)
}

::google::protobuf::uint8* csCounterListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csCounterListRequest)
  // required bool isMachine = 1;
  if (has_ismachine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ismachine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csCounterListRequest)
  return target;
}

int csCounterListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isMachine = 1;
    if (has_ismachine()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csCounterListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csCounterListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csCounterListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csCounterListRequest::MergeFrom(const csCounterListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ismachine()) {
      set_ismachine(from.ismachine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csCounterListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csCounterListRequest::CopyFrom(const csCounterListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csCounterListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void csCounterListRequest::Swap(csCounterListRequest* other) {
  if (other != this) {
    std::swap(ismachine_, other->ismachine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csCounterListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csCounterListRequest_descriptor_;
  metadata.reflection = csCounterListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scCounterListResponse::kIsMachineFieldNumber;
const int scCounterListResponse::kCounterNameFieldNumber;
#endif  // !_MSC_VER

scCounterListResponse::scCounterListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scCounterListResponse)
}

void scCounterListResponse::InitAsDefaultInstance() {
}

scCounterListResponse::scCounterListResponse(const scCounterListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scCounterListResponse)
}

void scCounterListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ismachine_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scCounterListResponse::~scCounterListResponse() {
  // @@protoc_insertion_point(destructor:agent.scCounterListResponse)
  SharedDtor();
}

void scCounterListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scCounterListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scCounterListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scCounterListResponse_descriptor_;
}

const scCounterListResponse& scCounterListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scCounterListResponse* scCounterListResponse::default_instance_ = NULL;

scCounterListResponse* scCounterListResponse::New() const {
  return new scCounterListResponse;
}

void scCounterListResponse::Clear() {
  ismachine_ = false;
  countername_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scCounterListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scCounterListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isMachine = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismachine_)));
          set_has_ismachine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_counterName;
        break;
      }

      // repeated string counterName = 2;
      case 2: {
        if (tag == 18) {
         parse_counterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_countername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->countername(this->countername_size() - 1).data(),
            this->countername(this->countername_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "countername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_counterName;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scCounterListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scCounterListResponse)
  return false;
#undef DO_
}

void scCounterListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scCounterListResponse)
  // required bool isMachine = 1;
  if (has_ismachine()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ismachine(), output);
  }

  // repeated string counterName = 2;
  for (int i = 0; i < this->countername_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->countername(i).data(), this->countername(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "countername");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->countername(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scCounterListResponse)
}

::google::protobuf::uint8* scCounterListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scCounterListResponse)
  // required bool isMachine = 1;
  if (has_ismachine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ismachine(), target);
  }

  // repeated string counterName = 2;
  for (int i = 0; i < this->countername_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countername(i).data(), this->countername(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countername");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->countername(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scCounterListResponse)
  return target;
}

int scCounterListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isMachine = 1;
    if (has_ismachine()) {
      total_size += 1 + 1;
    }

  }
  // repeated string counterName = 2;
  total_size += 1 * this->countername_size();
  for (int i = 0; i < this->countername_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->countername(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scCounterListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scCounterListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scCounterListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scCounterListResponse::MergeFrom(const scCounterListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  countername_.MergeFrom(from.countername_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ismachine()) {
      set_ismachine(from.ismachine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scCounterListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scCounterListResponse::CopyFrom(const scCounterListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scCounterListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void scCounterListResponse::Swap(scCounterListResponse* other) {
  if (other != this) {
    std::swap(ismachine_, other->ismachine_);
    countername_.Swap(&other->countername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scCounterListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scCounterListResponse_descriptor_;
  metadata.reflection = scCounterListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

csAgentReady::csAgentReady()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csAgentReady)
}

void csAgentReady::InitAsDefaultInstance() {
}

csAgentReady::csAgentReady(const csAgentReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csAgentReady)
}

void csAgentReady::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csAgentReady::~csAgentReady() {
  // @@protoc_insertion_point(destructor:agent.csAgentReady)
  SharedDtor();
}

void csAgentReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csAgentReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csAgentReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csAgentReady_descriptor_;
}

const csAgentReady& csAgentReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csAgentReady* csAgentReady::default_instance_ = NULL;

csAgentReady* csAgentReady::New() const {
  return new csAgentReady;
}

void csAgentReady::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csAgentReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csAgentReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csAgentReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csAgentReady)
  return false;
#undef DO_
}

void csAgentReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csAgentReady)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csAgentReady)
}

::google::protobuf::uint8* csAgentReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csAgentReady)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csAgentReady)
  return target;
}

int csAgentReady::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csAgentReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csAgentReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csAgentReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csAgentReady::MergeFrom(const csAgentReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csAgentReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csAgentReady::CopyFrom(const csAgentReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csAgentReady::IsInitialized() const {

  return true;
}

void csAgentReady::Swap(csAgentReady* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csAgentReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csAgentReady_descriptor_;
  metadata.reflection = csAgentReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrentProcess::kProcessNameFieldNumber;
const int CurrentProcess::kProcessIDFieldNumber;
#endif  // !_MSC_VER

CurrentProcess::CurrentProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.CurrentProcess)
}

void CurrentProcess::InitAsDefaultInstance() {
}

CurrentProcess::CurrentProcess(const CurrentProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.CurrentProcess)
}

void CurrentProcess::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentProcess::~CurrentProcess() {
  // @@protoc_insertion_point(destructor:agent.CurrentProcess)
  SharedDtor();
}

void CurrentProcess::SharedDtor() {
  if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete processname_;
  }
  if (this != default_instance_) {
  }
}

void CurrentProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentProcess_descriptor_;
}

const CurrentProcess& CurrentProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

CurrentProcess* CurrentProcess::default_instance_ = NULL;

CurrentProcess* CurrentProcess::New() const {
  return new CurrentProcess;
}

void CurrentProcess::Clear() {
  if (has_processname()) {
    if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      processname_->clear();
    }
  }
  processid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.CurrentProcess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string processName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processname().data(), this->processname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "processname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_processID;
        break;
      }

      // repeated int32 processID = 2;
      case 2: {
        if (tag == 16) {
         parse_processID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_processid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_processid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_processID;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.CurrentProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.CurrentProcess)
  return false;
#undef DO_
}

void CurrentProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.CurrentProcess)
  // required string processName = 1;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->processname(), output);
  }

  // repeated int32 processID = 2;
  for (int i = 0; i < this->processid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->processid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.CurrentProcess)
}

::google::protobuf::uint8* CurrentProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.CurrentProcess)
  // required string processName = 1;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->processname(), target);
  }

  // repeated int32 processID = 2;
  for (int i = 0; i < this->processid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->processid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.CurrentProcess)
  return target;
}

int CurrentProcess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string processName = 1;
    if (has_processname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processname());
    }

  }
  // repeated int32 processID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->processid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->processid(i));
    }
    total_size += 1 * this->processid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentProcess::MergeFrom(const CurrentProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  processid_.MergeFrom(from.processid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processname()) {
      set_processname(from.processname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentProcess::CopyFrom(const CurrentProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentProcess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CurrentProcess::Swap(CurrentProcess* other) {
  if (other != this) {
    std::swap(processname_, other->processname_);
    processid_.Swap(&other->processid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentProcess_descriptor_;
  metadata.reflection = CurrentProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int csCurrentProcessListSend::kProcessInfoFieldNumber;
#endif  // !_MSC_VER

csCurrentProcessListSend::csCurrentProcessListSend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csCurrentProcessListSend)
}

void csCurrentProcessListSend::InitAsDefaultInstance() {
}

csCurrentProcessListSend::csCurrentProcessListSend(const csCurrentProcessListSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csCurrentProcessListSend)
}

void csCurrentProcessListSend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csCurrentProcessListSend::~csCurrentProcessListSend() {
  // @@protoc_insertion_point(destructor:agent.csCurrentProcessListSend)
  SharedDtor();
}

void csCurrentProcessListSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csCurrentProcessListSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csCurrentProcessListSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csCurrentProcessListSend_descriptor_;
}

const csCurrentProcessListSend& csCurrentProcessListSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csCurrentProcessListSend* csCurrentProcessListSend::default_instance_ = NULL;

csCurrentProcessListSend* csCurrentProcessListSend::New() const {
  return new csCurrentProcessListSend;
}

void csCurrentProcessListSend::Clear() {
  processinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csCurrentProcessListSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csCurrentProcessListSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .agent.CurrentProcess processInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_processInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_processinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_processInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csCurrentProcessListSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csCurrentProcessListSend)
  return false;
#undef DO_
}

void csCurrentProcessListSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csCurrentProcessListSend)
  // repeated .agent.CurrentProcess processInfo = 1;
  for (int i = 0; i < this->processinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->processinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csCurrentProcessListSend)
}

::google::protobuf::uint8* csCurrentProcessListSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csCurrentProcessListSend)
  // repeated .agent.CurrentProcess processInfo = 1;
  for (int i = 0; i < this->processinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->processinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csCurrentProcessListSend)
  return target;
}

int csCurrentProcessListSend::ByteSize() const {
  int total_size = 0;

  // repeated .agent.CurrentProcess processInfo = 1;
  total_size += 1 * this->processinfo_size();
  for (int i = 0; i < this->processinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->processinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csCurrentProcessListSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csCurrentProcessListSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csCurrentProcessListSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csCurrentProcessListSend::MergeFrom(const csCurrentProcessListSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  processinfo_.MergeFrom(from.processinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csCurrentProcessListSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csCurrentProcessListSend::CopyFrom(const csCurrentProcessListSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csCurrentProcessListSend::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->processinfo())) return false;
  return true;
}

void csCurrentProcessListSend::Swap(csCurrentProcessListSend* other) {
  if (other != this) {
    processinfo_.Swap(&other->processinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csCurrentProcessListSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csCurrentProcessListSend_descriptor_;
  metadata.reflection = csCurrentProcessListSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

scHealthCheck::scHealthCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scHealthCheck)
}

void scHealthCheck::InitAsDefaultInstance() {
}

scHealthCheck::scHealthCheck(const scHealthCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scHealthCheck)
}

void scHealthCheck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scHealthCheck::~scHealthCheck() {
  // @@protoc_insertion_point(destructor:agent.scHealthCheck)
  SharedDtor();
}

void scHealthCheck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scHealthCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scHealthCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scHealthCheck_descriptor_;
}

const scHealthCheck& scHealthCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scHealthCheck* scHealthCheck::default_instance_ = NULL;

scHealthCheck* scHealthCheck::New() const {
  return new scHealthCheck;
}

void scHealthCheck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scHealthCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scHealthCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scHealthCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scHealthCheck)
  return false;
#undef DO_
}

void scHealthCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scHealthCheck)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scHealthCheck)
}

::google::protobuf::uint8* scHealthCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scHealthCheck)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scHealthCheck)
  return target;
}

int scHealthCheck::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scHealthCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scHealthCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scHealthCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scHealthCheck::MergeFrom(const scHealthCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scHealthCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scHealthCheck::CopyFrom(const scHealthCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scHealthCheck::IsInitialized() const {

  return true;
}

void scHealthCheck::Swap(scHealthCheck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scHealthCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scHealthCheck_descriptor_;
  metadata.reflection = scHealthCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

csHealthAck::csHealthAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csHealthAck)
}

void csHealthAck::InitAsDefaultInstance() {
}

csHealthAck::csHealthAck(const csHealthAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csHealthAck)
}

void csHealthAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csHealthAck::~csHealthAck() {
  // @@protoc_insertion_point(destructor:agent.csHealthAck)
  SharedDtor();
}

void csHealthAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csHealthAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csHealthAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csHealthAck_descriptor_;
}

const csHealthAck& csHealthAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csHealthAck* csHealthAck::default_instance_ = NULL;

csHealthAck* csHealthAck::New() const {
  return new csHealthAck;
}

void csHealthAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csHealthAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csHealthAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csHealthAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csHealthAck)
  return false;
#undef DO_
}

void csHealthAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csHealthAck)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csHealthAck)
}

::google::protobuf::uint8* csHealthAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csHealthAck)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csHealthAck)
  return target;
}

int csHealthAck::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csHealthAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csHealthAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csHealthAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csHealthAck::MergeFrom(const csHealthAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csHealthAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csHealthAck::CopyFrom(const csHealthAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csHealthAck::IsInitialized() const {

  return true;
}

void csHealthAck::Swap(csHealthAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csHealthAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csHealthAck_descriptor_;
  metadata.reflection = csHealthAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scProcessCommandRequest::kTypeFieldNumber;
const int scProcessCommandRequest::kProcessNameFieldNumber;
#endif  // !_MSC_VER

scProcessCommandRequest::scProcessCommandRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scProcessCommandRequest)
}

void scProcessCommandRequest::InitAsDefaultInstance() {
}

scProcessCommandRequest::scProcessCommandRequest(const scProcessCommandRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scProcessCommandRequest)
}

void scProcessCommandRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scProcessCommandRequest::~scProcessCommandRequest() {
  // @@protoc_insertion_point(destructor:agent.scProcessCommandRequest)
  SharedDtor();
}

void scProcessCommandRequest::SharedDtor() {
  if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete processname_;
  }
  if (this != default_instance_) {
  }
}

void scProcessCommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scProcessCommandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scProcessCommandRequest_descriptor_;
}

const scProcessCommandRequest& scProcessCommandRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scProcessCommandRequest* scProcessCommandRequest::default_instance_ = NULL;

scProcessCommandRequest* scProcessCommandRequest::New() const {
  return new scProcessCommandRequest;
}

void scProcessCommandRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_processname()) {
      if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        processname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scProcessCommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scProcessCommandRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .agent.ProcessCommandType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::ProcessCommandType_IsValid(value)) {
            set_type(static_cast< ::agent::ProcessCommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_processName;
        break;
      }

      // required string processName = 2;
      case 2: {
        if (tag == 18) {
         parse_processName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processname().data(), this->processname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "processname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scProcessCommandRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scProcessCommandRequest)
  return false;
#undef DO_
}

void scProcessCommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scProcessCommandRequest)
  // required .agent.ProcessCommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string processName = 2;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->processname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scProcessCommandRequest)
}

::google::protobuf::uint8* scProcessCommandRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scProcessCommandRequest)
  // required .agent.ProcessCommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string processName = 2;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->processname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scProcessCommandRequest)
  return target;
}

int scProcessCommandRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .agent.ProcessCommandType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string processName = 2;
    if (has_processname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scProcessCommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scProcessCommandRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scProcessCommandRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scProcessCommandRequest::MergeFrom(const scProcessCommandRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_processname()) {
      set_processname(from.processname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scProcessCommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scProcessCommandRequest::CopyFrom(const scProcessCommandRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scProcessCommandRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void scProcessCommandRequest::Swap(scProcessCommandRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(processname_, other->processname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scProcessCommandRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scProcessCommandRequest_descriptor_;
  metadata.reflection = scProcessCommandRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* csProcessCommandResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csProcessCommandResponse_Result_descriptor_;
}
bool csProcessCommandResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const csProcessCommandResponse_Result csProcessCommandResponse::SUCCESS;
const csProcessCommandResponse_Result csProcessCommandResponse::FAILURE;
const csProcessCommandResponse_Result csProcessCommandResponse::Result_MIN;
const csProcessCommandResponse_Result csProcessCommandResponse::Result_MAX;
const int csProcessCommandResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int csProcessCommandResponse::kTypeFieldNumber;
const int csProcessCommandResponse::kProcessIDFieldNumber;
const int csProcessCommandResponse::kResultFieldNumber;
const int csProcessCommandResponse::kFailReasonFieldNumber;
#endif  // !_MSC_VER

csProcessCommandResponse::csProcessCommandResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csProcessCommandResponse)
}

void csProcessCommandResponse::InitAsDefaultInstance() {
}

csProcessCommandResponse::csProcessCommandResponse(const csProcessCommandResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csProcessCommandResponse)
}

void csProcessCommandResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  result_ = 0;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csProcessCommandResponse::~csProcessCommandResponse() {
  // @@protoc_insertion_point(destructor:agent.csProcessCommandResponse)
  SharedDtor();
}

void csProcessCommandResponse::SharedDtor() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
  }
}

void csProcessCommandResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csProcessCommandResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csProcessCommandResponse_descriptor_;
}

const csProcessCommandResponse& csProcessCommandResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csProcessCommandResponse* csProcessCommandResponse::default_instance_ = NULL;

csProcessCommandResponse* csProcessCommandResponse::New() const {
  return new csProcessCommandResponse;
}

void csProcessCommandResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<csProcessCommandResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(type_, result_);
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  processid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csProcessCommandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csProcessCommandResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .agent.ProcessCommandType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::ProcessCommandType_IsValid(value)) {
            set_type(static_cast< ::agent::ProcessCommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_processID;
        break;
      }

      // repeated int32 processID = 2;
      case 2: {
        if (tag == 16) {
         parse_processID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_processid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_processid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_processID;
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required .agent.csProcessCommandResponse.Result result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::csProcessCommandResponse_Result_IsValid(value)) {
            set_result(static_cast< ::agent::csProcessCommandResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_failReason;
        break;
      }

      // optional string failReason = 4;
      case 4: {
        if (tag == 34) {
         parse_failReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csProcessCommandResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csProcessCommandResponse)
  return false;
#undef DO_
}

void csProcessCommandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csProcessCommandResponse)
  // required .agent.ProcessCommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated int32 processID = 2;
  for (int i = 0; i < this->processid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->processid(i), output);
  }

  // required .agent.csProcessCommandResponse.Result result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional string failReason = 4;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->failreason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csProcessCommandResponse)
}

::google::protobuf::uint8* csProcessCommandResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csProcessCommandResponse)
  // required .agent.ProcessCommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated int32 processID = 2;
  for (int i = 0; i < this->processid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->processid(i), target);
  }

  // required .agent.csProcessCommandResponse.Result result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional string failReason = 4;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->failreason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csProcessCommandResponse)
  return target;
}

int csProcessCommandResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .agent.ProcessCommandType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .agent.csProcessCommandResponse.Result result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string failReason = 4;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

  }
  // repeated int32 processID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->processid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->processid(i));
    }
    total_size += 1 * this->processid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csProcessCommandResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csProcessCommandResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csProcessCommandResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csProcessCommandResponse::MergeFrom(const csProcessCommandResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  processid_.MergeFrom(from.processid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csProcessCommandResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csProcessCommandResponse::CopyFrom(const csProcessCommandResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csProcessCommandResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void csProcessCommandResponse::Swap(csProcessCommandResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    processid_.Swap(&other->processid_);
    std::swap(result_, other->result_);
    std::swap(failreason_, other->failreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csProcessCommandResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csProcessCommandResponse_descriptor_;
  metadata.reflection = csProcessCommandResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scCounterCommandRequest::kTypeFieldNumber;
const int scCounterCommandRequest::kCounterNameFieldNumber;
const int scCounterCommandRequest::kIsMachineFieldNumber;
#endif  // !_MSC_VER

scCounterCommandRequest::scCounterCommandRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scCounterCommandRequest)
}

void scCounterCommandRequest::InitAsDefaultInstance() {
}

scCounterCommandRequest::scCounterCommandRequest(const scCounterCommandRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scCounterCommandRequest)
}

void scCounterCommandRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  countername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ismachine_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scCounterCommandRequest::~scCounterCommandRequest() {
  // @@protoc_insertion_point(destructor:agent.scCounterCommandRequest)
  SharedDtor();
}

void scCounterCommandRequest::SharedDtor() {
  if (countername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete countername_;
  }
  if (this != default_instance_) {
  }
}

void scCounterCommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scCounterCommandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scCounterCommandRequest_descriptor_;
}

const scCounterCommandRequest& scCounterCommandRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scCounterCommandRequest* scCounterCommandRequest::default_instance_ = NULL;

scCounterCommandRequest* scCounterCommandRequest::New() const {
  return new scCounterCommandRequest;
}

void scCounterCommandRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 1;
    if (has_countername()) {
      if (countername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        countername_->clear();
      }
    }
    ismachine_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scCounterCommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scCounterCommandRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .agent.CounterCommandType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::CounterCommandType_IsValid(value)) {
            set_type(static_cast< ::agent::CounterCommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CounterName;
        break;
      }

      // required string CounterName = 2;
      case 2: {
        if (tag == 18) {
         parse_CounterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->countername().data(), this->countername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "countername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isMachine;
        break;
      }

      // required bool isMachine = 3;
      case 3: {
        if (tag == 24) {
         parse_isMachine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismachine_)));
          set_has_ismachine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scCounterCommandRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scCounterCommandRequest)
  return false;
#undef DO_
}

void scCounterCommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scCounterCommandRequest)
  // required .agent.CounterCommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string CounterName = 2;
  if (has_countername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countername().data(), this->countername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->countername(), output);
  }

  // required bool isMachine = 3;
  if (has_ismachine()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ismachine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scCounterCommandRequest)
}

::google::protobuf::uint8* scCounterCommandRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scCounterCommandRequest)
  // required .agent.CounterCommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string CounterName = 2;
  if (has_countername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countername().data(), this->countername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->countername(), target);
  }

  // required bool isMachine = 3;
  if (has_ismachine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ismachine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scCounterCommandRequest)
  return target;
}

int scCounterCommandRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .agent.CounterCommandType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string CounterName = 2;
    if (has_countername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countername());
    }

    // required bool isMachine = 3;
    if (has_ismachine()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scCounterCommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scCounterCommandRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scCounterCommandRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scCounterCommandRequest::MergeFrom(const scCounterCommandRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_countername()) {
      set_countername(from.countername());
    }
    if (from.has_ismachine()) {
      set_ismachine(from.ismachine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scCounterCommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scCounterCommandRequest::CopyFrom(const scCounterCommandRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scCounterCommandRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void scCounterCommandRequest::Swap(scCounterCommandRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(countername_, other->countername_);
    std::swap(ismachine_, other->ismachine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scCounterCommandRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scCounterCommandRequest_descriptor_;
  metadata.reflection = scCounterCommandRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* csCounterCommandResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csCounterCommandResponse_Result_descriptor_;
}
bool csCounterCommandResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const csCounterCommandResponse_Result csCounterCommandResponse::SUCCESS;
const csCounterCommandResponse_Result csCounterCommandResponse::FAILURE;
const csCounterCommandResponse_Result csCounterCommandResponse::Result_MIN;
const csCounterCommandResponse_Result csCounterCommandResponse::Result_MAX;
const int csCounterCommandResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int csCounterCommandResponse::kTypeFieldNumber;
const int csCounterCommandResponse::kResultFieldNumber;
const int csCounterCommandResponse::kFailReasonFieldNumber;
#endif  // !_MSC_VER

csCounterCommandResponse::csCounterCommandResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csCounterCommandResponse)
}

void csCounterCommandResponse::InitAsDefaultInstance() {
}

csCounterCommandResponse::csCounterCommandResponse(const csCounterCommandResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csCounterCommandResponse)
}

void csCounterCommandResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  result_ = 0;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csCounterCommandResponse::~csCounterCommandResponse() {
  // @@protoc_insertion_point(destructor:agent.csCounterCommandResponse)
  SharedDtor();
}

void csCounterCommandResponse::SharedDtor() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
  }
}

void csCounterCommandResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csCounterCommandResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csCounterCommandResponse_descriptor_;
}

const csCounterCommandResponse& csCounterCommandResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csCounterCommandResponse* csCounterCommandResponse::default_instance_ = NULL;

csCounterCommandResponse* csCounterCommandResponse::New() const {
  return new csCounterCommandResponse;
}

void csCounterCommandResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 1;
    result_ = 0;
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csCounterCommandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csCounterCommandResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .agent.CounterCommandType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::CounterCommandType_IsValid(value)) {
            set_type(static_cast< ::agent::CounterCommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required .agent.csCounterCommandResponse.Result result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::csCounterCommandResponse_Result_IsValid(value)) {
            set_result(static_cast< ::agent::csCounterCommandResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_failReason;
        break;
      }

      // optional string failReason = 4;
      case 4: {
        if (tag == 34) {
         parse_failReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csCounterCommandResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csCounterCommandResponse)
  return false;
#undef DO_
}

void csCounterCommandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csCounterCommandResponse)
  // required .agent.CounterCommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .agent.csCounterCommandResponse.Result result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional string failReason = 4;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->failreason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csCounterCommandResponse)
}

::google::protobuf::uint8* csCounterCommandResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csCounterCommandResponse)
  // required .agent.CounterCommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .agent.csCounterCommandResponse.Result result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional string failReason = 4;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->failreason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csCounterCommandResponse)
  return target;
}

int csCounterCommandResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .agent.CounterCommandType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .agent.csCounterCommandResponse.Result result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string failReason = 4;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csCounterCommandResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csCounterCommandResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csCounterCommandResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csCounterCommandResponse::MergeFrom(const csCounterCommandResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csCounterCommandResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csCounterCommandResponse::CopyFrom(const csCounterCommandResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csCounterCommandResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void csCounterCommandResponse::Swap(csCounterCommandResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(failreason_, other->failreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csCounterCommandResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csCounterCommandResponse_descriptor_;
  metadata.reflection = csCounterCommandResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scStartRecord::kIsMachineFieldNumber;
const int scStartRecord::kTotalRecordTimeFieldNumber;
const int scStartRecord::kIntervalFieldNumber;
const int scStartRecord::kResponseTimeFieldNumber;
const int scStartRecord::kDelayFieldNumber;
#endif  // !_MSC_VER

scStartRecord::scStartRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scStartRecord)
}

void scStartRecord::InitAsDefaultInstance() {
}

scStartRecord::scStartRecord(const scStartRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scStartRecord)
}

void scStartRecord::SharedCtor() {
  _cached_size_ = 0;
  ismachine_ = false;
  totalrecordtime_ = 0;
  interval_ = 0;
  responsetime_ = 0;
  delay_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scStartRecord::~scStartRecord() {
  // @@protoc_insertion_point(destructor:agent.scStartRecord)
  SharedDtor();
}

void scStartRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scStartRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scStartRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scStartRecord_descriptor_;
}

const scStartRecord& scStartRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scStartRecord* scStartRecord::default_instance_ = NULL;

scStartRecord* scStartRecord::New() const {
  return new scStartRecord;
}

void scStartRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<scStartRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ismachine_, delay_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scStartRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scStartRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 totalRecordTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalrecordtime_)));
          set_has_totalrecordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_interval;
        break;
      }

      // required int32 interval = 2;
      case 2: {
        if (tag == 16) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_responseTime;
        break;
      }

      // required int32 responseTime = 3;
      case 3: {
        if (tag == 24) {
         parse_responseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &responsetime_)));
          set_has_responsetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_delay;
        break;
      }

      // optional int64 delay = 4;
      case 4: {
        if (tag == 32) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isMachine;
        break;
      }

      // required bool isMachine = 5;
      case 5: {
        if (tag == 40) {
         parse_isMachine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismachine_)));
          set_has_ismachine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scStartRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scStartRecord)
  return false;
#undef DO_
}

void scStartRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scStartRecord)
  // required int32 totalRecordTime = 1;
  if (has_totalrecordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalrecordtime(), output);
  }

  // required int32 interval = 2;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->interval(), output);
  }

  // required int32 responseTime = 3;
  if (has_responsetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->responsetime(), output);
  }

  // optional int64 delay = 4;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->delay(), output);
  }

  // required bool isMachine = 5;
  if (has_ismachine()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ismachine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scStartRecord)
}

::google::protobuf::uint8* scStartRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scStartRecord)
  // required int32 totalRecordTime = 1;
  if (has_totalrecordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalrecordtime(), target);
  }

  // required int32 interval = 2;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->interval(), target);
  }

  // required int32 responseTime = 3;
  if (has_responsetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->responsetime(), target);
  }

  // optional int64 delay = 4;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->delay(), target);
  }

  // required bool isMachine = 5;
  if (has_ismachine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ismachine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scStartRecord)
  return target;
}

int scStartRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isMachine = 5;
    if (has_ismachine()) {
      total_size += 1 + 1;
    }

    // required int32 totalRecordTime = 1;
    if (has_totalrecordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalrecordtime());
    }

    // required int32 interval = 2;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

    // required int32 responseTime = 3;
    if (has_responsetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->responsetime());
    }

    // optional int64 delay = 4;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->delay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scStartRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scStartRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scStartRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scStartRecord::MergeFrom(const scStartRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ismachine()) {
      set_ismachine(from.ismachine());
    }
    if (from.has_totalrecordtime()) {
      set_totalrecordtime(from.totalrecordtime());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_responsetime()) {
      set_responsetime(from.responsetime());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scStartRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scStartRecord::CopyFrom(const scStartRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scStartRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void scStartRecord::Swap(scStartRecord* other) {
  if (other != this) {
    std::swap(ismachine_, other->ismachine_);
    std::swap(totalrecordtime_, other->totalrecordtime_);
    std::swap(interval_, other->interval_);
    std::swap(responsetime_, other->responsetime_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scStartRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scStartRecord_descriptor_;
  metadata.reflection = scStartRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scStopRecord::kIsMachineFieldNumber;
#endif  // !_MSC_VER

scStopRecord::scStopRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scStopRecord)
}

void scStopRecord::InitAsDefaultInstance() {
}

scStopRecord::scStopRecord(const scStopRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scStopRecord)
}

void scStopRecord::SharedCtor() {
  _cached_size_ = 0;
  ismachine_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scStopRecord::~scStopRecord() {
  // @@protoc_insertion_point(destructor:agent.scStopRecord)
  SharedDtor();
}

void scStopRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scStopRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scStopRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scStopRecord_descriptor_;
}

const scStopRecord& scStopRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scStopRecord* scStopRecord::default_instance_ = NULL;

scStopRecord* scStopRecord::New() const {
  return new scStopRecord;
}

void scStopRecord::Clear() {
  ismachine_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scStopRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scStopRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isMachine = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismachine_)));
          set_has_ismachine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scStopRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scStopRecord)
  return false;
#undef DO_
}

void scStopRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scStopRecord)
  // required bool isMachine = 1;
  if (has_ismachine()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ismachine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scStopRecord)
}

::google::protobuf::uint8* scStopRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scStopRecord)
  // required bool isMachine = 1;
  if (has_ismachine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ismachine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scStopRecord)
  return target;
}

int scStopRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isMachine = 1;
    if (has_ismachine()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scStopRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scStopRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scStopRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scStopRecord::MergeFrom(const scStopRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ismachine()) {
      set_ismachine(from.ismachine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scStopRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scStopRecord::CopyFrom(const scStopRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scStopRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void scStopRecord::Swap(scStopRecord* other) {
  if (other != this) {
    std::swap(ismachine_, other->ismachine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scStopRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scStopRecord_descriptor_;
  metadata.reflection = scStopRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Log::kTimeStampFieldNumber;
const int Log::kValueFieldNumber;
#endif  // !_MSC_VER

Log::Log()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.Log)
}

void Log::InitAsDefaultInstance() {
}

Log::Log(const Log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.Log)
}

void Log::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:agent.Log)
  SharedDtor();
}

void Log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Log_descriptor_;
}

const Log& Log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

Log* Log::default_instance_ = NULL;

Log* Log::New() const {
  return new Log;
}

void Log::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Log*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(timestamp_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.Log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timeStamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // required double value = 2;
      case 2: {
        if (tag == 17) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.Log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.Log)
  return false;
#undef DO_
}

void Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.Log)
  // required int64 timeStamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // required double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.Log)
}

::google::protobuf::uint8* Log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.Log)
  // required int64 timeStamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // required double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.Log)
  return target;
}

int Log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 timeStamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // required double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Log::Swap(Log* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Log_descriptor_;
  metadata.reflection = Log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessInfos::kCounterNameFieldNumber;
const int ProcessInfos::kProcessNameFieldNumber;
const int ProcessInfos::kProcessIDFieldNumber;
const int ProcessInfos::kLogsFieldNumber;
#endif  // !_MSC_VER

ProcessInfos::ProcessInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.ProcessInfos)
}

void ProcessInfos::InitAsDefaultInstance() {
}

ProcessInfos::ProcessInfos(const ProcessInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.ProcessInfos)
}

void ProcessInfos::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  countername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessInfos::~ProcessInfos() {
  // @@protoc_insertion_point(destructor:agent.ProcessInfos)
  SharedDtor();
}

void ProcessInfos::SharedDtor() {
  if (countername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete countername_;
  }
  if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete processname_;
  }
  if (this != default_instance_) {
  }
}

void ProcessInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessInfos_descriptor_;
}

const ProcessInfos& ProcessInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

ProcessInfos* ProcessInfos::default_instance_ = NULL;

ProcessInfos* ProcessInfos::New() const {
  return new ProcessInfos;
}

void ProcessInfos::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_countername()) {
      if (countername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        countername_->clear();
      }
    }
    if (has_processname()) {
      if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        processname_->clear();
      }
    }
    processid_ = 0;
  }
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.ProcessInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string counterName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->countername().data(), this->countername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "countername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_processName;
        break;
      }

      // required string processName = 2;
      case 2: {
        if (tag == 18) {
         parse_processName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processname().data(), this->processname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "processname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_processID;
        break;
      }

      // required int32 processID = 3;
      case 3: {
        if (tag == 24) {
         parse_processID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processid_)));
          set_has_processid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_logs;
        break;
      }

      // repeated .agent.Log logs = 4;
      case 4: {
        if (tag == 34) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_logs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.ProcessInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.ProcessInfos)
  return false;
#undef DO_
}

void ProcessInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.ProcessInfos)
  // required string counterName = 1;
  if (has_countername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countername().data(), this->countername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->countername(), output);
  }

  // required string processName = 2;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->processname(), output);
  }

  // required int32 processID = 3;
  if (has_processid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->processid(), output);
  }

  // repeated .agent.Log logs = 4;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.ProcessInfos)
}

::google::protobuf::uint8* ProcessInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.ProcessInfos)
  // required string counterName = 1;
  if (has_countername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countername().data(), this->countername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->countername(), target);
  }

  // required string processName = 2;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->processname(), target);
  }

  // required int32 processID = 3;
  if (has_processid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->processid(), target);
  }

  // repeated .agent.Log logs = 4;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.ProcessInfos)
  return target;
}

int ProcessInfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string counterName = 1;
    if (has_countername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countername());
    }

    // required string processName = 2;
    if (has_processname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processname());
    }

    // required int32 processID = 3;
    if (has_processid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processid());
    }

  }
  // repeated .agent.Log logs = 4;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessInfos::MergeFrom(const ProcessInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countername()) {
      set_countername(from.countername());
    }
    if (from.has_processname()) {
      set_processname(from.processname());
    }
    if (from.has_processid()) {
      set_processid(from.processid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessInfos::CopyFrom(const ProcessInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessInfos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->logs())) return false;
  return true;
}

void ProcessInfos::Swap(ProcessInfos* other) {
  if (other != this) {
    std::swap(countername_, other->countername_);
    std::swap(processname_, other->processname_);
    std::swap(processid_, other->processid_);
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessInfos_descriptor_;
  metadata.reflection = ProcessInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int csTotalProcessInfoSend::kInfoFieldNumber;
#endif  // !_MSC_VER

csTotalProcessInfoSend::csTotalProcessInfoSend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csTotalProcessInfoSend)
}

void csTotalProcessInfoSend::InitAsDefaultInstance() {
}

csTotalProcessInfoSend::csTotalProcessInfoSend(const csTotalProcessInfoSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csTotalProcessInfoSend)
}

void csTotalProcessInfoSend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csTotalProcessInfoSend::~csTotalProcessInfoSend() {
  // @@protoc_insertion_point(destructor:agent.csTotalProcessInfoSend)
  SharedDtor();
}

void csTotalProcessInfoSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csTotalProcessInfoSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csTotalProcessInfoSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csTotalProcessInfoSend_descriptor_;
}

const csTotalProcessInfoSend& csTotalProcessInfoSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csTotalProcessInfoSend* csTotalProcessInfoSend::default_instance_ = NULL;

csTotalProcessInfoSend* csTotalProcessInfoSend::New() const {
  return new csTotalProcessInfoSend;
}

void csTotalProcessInfoSend::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csTotalProcessInfoSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csTotalProcessInfoSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .agent.ProcessInfos info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csTotalProcessInfoSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csTotalProcessInfoSend)
  return false;
#undef DO_
}

void csTotalProcessInfoSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csTotalProcessInfoSend)
  // repeated .agent.ProcessInfos info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csTotalProcessInfoSend)
}

::google::protobuf::uint8* csTotalProcessInfoSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csTotalProcessInfoSend)
  // repeated .agent.ProcessInfos info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csTotalProcessInfoSend)
  return target;
}

int csTotalProcessInfoSend::ByteSize() const {
  int total_size = 0;

  // repeated .agent.ProcessInfos info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csTotalProcessInfoSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csTotalProcessInfoSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csTotalProcessInfoSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csTotalProcessInfoSend::MergeFrom(const csTotalProcessInfoSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csTotalProcessInfoSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csTotalProcessInfoSend::CopyFrom(const csTotalProcessInfoSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csTotalProcessInfoSend::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void csTotalProcessInfoSend::Swap(csTotalProcessInfoSend* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csTotalProcessInfoSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csTotalProcessInfoSend_descriptor_;
  metadata.reflection = csTotalProcessInfoSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MachineInfos::kCounterNameFieldNumber;
const int MachineInfos::kLogsFieldNumber;
#endif  // !_MSC_VER

MachineInfos::MachineInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.MachineInfos)
}

void MachineInfos::InitAsDefaultInstance() {
}

MachineInfos::MachineInfos(const MachineInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.MachineInfos)
}

void MachineInfos::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  countername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineInfos::~MachineInfos() {
  // @@protoc_insertion_point(destructor:agent.MachineInfos)
  SharedDtor();
}

void MachineInfos::SharedDtor() {
  if (countername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete countername_;
  }
  if (this != default_instance_) {
  }
}

void MachineInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineInfos_descriptor_;
}

const MachineInfos& MachineInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

MachineInfos* MachineInfos::default_instance_ = NULL;

MachineInfos* MachineInfos::New() const {
  return new MachineInfos;
}

void MachineInfos::Clear() {
  if (has_countername()) {
    if (countername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      countername_->clear();
    }
  }
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.MachineInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string counterName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->countername().data(), this->countername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "countername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_logs;
        break;
      }

      // repeated .agent.Log logs = 2;
      case 2: {
        if (tag == 18) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_logs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.MachineInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.MachineInfos)
  return false;
#undef DO_
}

void MachineInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.MachineInfos)
  // required string counterName = 1;
  if (has_countername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countername().data(), this->countername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->countername(), output);
  }

  // repeated .agent.Log logs = 2;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.MachineInfos)
}

::google::protobuf::uint8* MachineInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.MachineInfos)
  // required string counterName = 1;
  if (has_countername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countername().data(), this->countername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->countername(), target);
  }

  // repeated .agent.Log logs = 2;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.MachineInfos)
  return target;
}

int MachineInfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string counterName = 1;
    if (has_countername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countername());
    }

  }
  // repeated .agent.Log logs = 2;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineInfos::MergeFrom(const MachineInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countername()) {
      set_countername(from.countername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineInfos::CopyFrom(const MachineInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineInfos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->logs())) return false;
  return true;
}

void MachineInfos::Swap(MachineInfos* other) {
  if (other != this) {
    std::swap(countername_, other->countername_);
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineInfos_descriptor_;
  metadata.reflection = MachineInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int csTotalMachineInfoSend::kInfoFieldNumber;
#endif  // !_MSC_VER

csTotalMachineInfoSend::csTotalMachineInfoSend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csTotalMachineInfoSend)
}

void csTotalMachineInfoSend::InitAsDefaultInstance() {
}

csTotalMachineInfoSend::csTotalMachineInfoSend(const csTotalMachineInfoSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csTotalMachineInfoSend)
}

void csTotalMachineInfoSend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csTotalMachineInfoSend::~csTotalMachineInfoSend() {
  // @@protoc_insertion_point(destructor:agent.csTotalMachineInfoSend)
  SharedDtor();
}

void csTotalMachineInfoSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csTotalMachineInfoSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csTotalMachineInfoSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csTotalMachineInfoSend_descriptor_;
}

const csTotalMachineInfoSend& csTotalMachineInfoSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csTotalMachineInfoSend* csTotalMachineInfoSend::default_instance_ = NULL;

csTotalMachineInfoSend* csTotalMachineInfoSend::New() const {
  return new csTotalMachineInfoSend;
}

void csTotalMachineInfoSend::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csTotalMachineInfoSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csTotalMachineInfoSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .agent.MachineInfos info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csTotalMachineInfoSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csTotalMachineInfoSend)
  return false;
#undef DO_
}

void csTotalMachineInfoSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csTotalMachineInfoSend)
  // repeated .agent.MachineInfos info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csTotalMachineInfoSend)
}

::google::protobuf::uint8* csTotalMachineInfoSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csTotalMachineInfoSend)
  // repeated .agent.MachineInfos info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csTotalMachineInfoSend)
  return target;
}

int csTotalMachineInfoSend::ByteSize() const {
  int total_size = 0;

  // repeated .agent.MachineInfos info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csTotalMachineInfoSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csTotalMachineInfoSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csTotalMachineInfoSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csTotalMachineInfoSend::MergeFrom(const csTotalMachineInfoSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csTotalMachineInfoSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csTotalMachineInfoSend::CopyFrom(const csTotalMachineInfoSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csTotalMachineInfoSend::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void csTotalMachineInfoSend::Swap(csTotalMachineInfoSend* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csTotalMachineInfoSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csTotalMachineInfoSend_descriptor_;
  metadata.reflection = csTotalMachineInfoSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scProcessRestrictionRequest::kProcessIDFieldNumber;
const int scProcessRestrictionRequest::kTypeFieldNumber;
const int scProcessRestrictionRequest::kValue1FieldNumber;
const int scProcessRestrictionRequest::kValue2FieldNumber;
#endif  // !_MSC_VER

scProcessRestrictionRequest::scProcessRestrictionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.scProcessRestrictionRequest)
}

void scProcessRestrictionRequest::InitAsDefaultInstance() {
}

scProcessRestrictionRequest::scProcessRestrictionRequest(const scProcessRestrictionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.scProcessRestrictionRequest)
}

void scProcessRestrictionRequest::SharedCtor() {
  _cached_size_ = 0;
  processid_ = 0;
  type_ = 0;
  value1_ = 0;
  value2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scProcessRestrictionRequest::~scProcessRestrictionRequest() {
  // @@protoc_insertion_point(destructor:agent.scProcessRestrictionRequest)
  SharedDtor();
}

void scProcessRestrictionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scProcessRestrictionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scProcessRestrictionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scProcessRestrictionRequest_descriptor_;
}

const scProcessRestrictionRequest& scProcessRestrictionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

scProcessRestrictionRequest* scProcessRestrictionRequest::default_instance_ = NULL;

scProcessRestrictionRequest* scProcessRestrictionRequest::New() const {
  return new scProcessRestrictionRequest;
}

void scProcessRestrictionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<scProcessRestrictionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(processid_, value2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scProcessRestrictionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.scProcessRestrictionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 processID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processid_)));
          set_has_processid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .agent.Restriction type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::Restriction_IsValid(value)) {
            set_type(static_cast< ::agent::Restriction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value1;
        break;
      }

      // required int32 value1 = 3;
      case 3: {
        if (tag == 24) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value2;
        break;
      }

      // optional int32 value2 = 4;
      case 4: {
        if (tag == 32) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.scProcessRestrictionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.scProcessRestrictionRequest)
  return false;
#undef DO_
}

void scProcessRestrictionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.scProcessRestrictionRequest)
  // required int32 processID = 1;
  if (has_processid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->processid(), output);
  }

  // required .agent.Restriction type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 value1 = 3;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value1(), output);
  }

  // optional int32 value2 = 4;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.scProcessRestrictionRequest)
}

::google::protobuf::uint8* scProcessRestrictionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.scProcessRestrictionRequest)
  // required int32 processID = 1;
  if (has_processid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->processid(), target);
  }

  // required .agent.Restriction type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 value1 = 3;
  if (has_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value1(), target);
  }

  // optional int32 value2 = 4;
  if (has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.scProcessRestrictionRequest)
  return target;
}

int scProcessRestrictionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 processID = 1;
    if (has_processid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processid());
    }

    // required .agent.Restriction type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 value1 = 3;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value1());
    }

    // optional int32 value2 = 4;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scProcessRestrictionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scProcessRestrictionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scProcessRestrictionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scProcessRestrictionRequest::MergeFrom(const scProcessRestrictionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processid()) {
      set_processid(from.processid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scProcessRestrictionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scProcessRestrictionRequest::CopyFrom(const scProcessRestrictionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scProcessRestrictionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void scProcessRestrictionRequest::Swap(scProcessRestrictionRequest* other) {
  if (other != this) {
    std::swap(processid_, other->processid_);
    std::swap(type_, other->type_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scProcessRestrictionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scProcessRestrictionRequest_descriptor_;
  metadata.reflection = scProcessRestrictionRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* csProcessRestrictionResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csProcessRestrictionResponse_Result_descriptor_;
}
bool csProcessRestrictionResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const csProcessRestrictionResponse_Result csProcessRestrictionResponse::SUCCESS;
const csProcessRestrictionResponse_Result csProcessRestrictionResponse::FAILURE;
const csProcessRestrictionResponse_Result csProcessRestrictionResponse::Result_MIN;
const csProcessRestrictionResponse_Result csProcessRestrictionResponse::Result_MAX;
const int csProcessRestrictionResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int csProcessRestrictionResponse::kProcessIDFieldNumber;
const int csProcessRestrictionResponse::kTypeFieldNumber;
const int csProcessRestrictionResponse::kResultFieldNumber;
const int csProcessRestrictionResponse::kFailReasonFieldNumber;
#endif  // !_MSC_VER

csProcessRestrictionResponse::csProcessRestrictionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csProcessRestrictionResponse)
}

void csProcessRestrictionResponse::InitAsDefaultInstance() {
}

csProcessRestrictionResponse::csProcessRestrictionResponse(const csProcessRestrictionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csProcessRestrictionResponse)
}

void csProcessRestrictionResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  processid_ = 0;
  type_ = 0;
  result_ = 0;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csProcessRestrictionResponse::~csProcessRestrictionResponse() {
  // @@protoc_insertion_point(destructor:agent.csProcessRestrictionResponse)
  SharedDtor();
}

void csProcessRestrictionResponse::SharedDtor() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
  }
}

void csProcessRestrictionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csProcessRestrictionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csProcessRestrictionResponse_descriptor_;
}

const csProcessRestrictionResponse& csProcessRestrictionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csProcessRestrictionResponse* csProcessRestrictionResponse::default_instance_ = NULL;

csProcessRestrictionResponse* csProcessRestrictionResponse::New() const {
  return new csProcessRestrictionResponse;
}

void csProcessRestrictionResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<csProcessRestrictionResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(processid_, type_);
    result_ = 0;
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csProcessRestrictionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csProcessRestrictionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 processID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processid_)));
          set_has_processid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .agent.Restriction type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::Restriction_IsValid(value)) {
            set_type(static_cast< ::agent::Restriction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required .agent.csProcessRestrictionResponse.Result result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::csProcessRestrictionResponse_Result_IsValid(value)) {
            set_result(static_cast< ::agent::csProcessRestrictionResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_failReason;
        break;
      }

      // optional string failReason = 4;
      case 4: {
        if (tag == 34) {
         parse_failReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csProcessRestrictionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csProcessRestrictionResponse)
  return false;
#undef DO_
}

void csProcessRestrictionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csProcessRestrictionResponse)
  // required int32 processID = 1;
  if (has_processid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->processid(), output);
  }

  // required .agent.Restriction type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .agent.csProcessRestrictionResponse.Result result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional string failReason = 4;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->failreason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csProcessRestrictionResponse)
}

::google::protobuf::uint8* csProcessRestrictionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csProcessRestrictionResponse)
  // required int32 processID = 1;
  if (has_processid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->processid(), target);
  }

  // required .agent.Restriction type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .agent.csProcessRestrictionResponse.Result result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional string failReason = 4;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->failreason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csProcessRestrictionResponse)
  return target;
}

int csProcessRestrictionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 processID = 1;
    if (has_processid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processid());
    }

    // required .agent.Restriction type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .agent.csProcessRestrictionResponse.Result result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string failReason = 4;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csProcessRestrictionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csProcessRestrictionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csProcessRestrictionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csProcessRestrictionResponse::MergeFrom(const csProcessRestrictionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processid()) {
      set_processid(from.processid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csProcessRestrictionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csProcessRestrictionResponse::CopyFrom(const csProcessRestrictionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csProcessRestrictionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void csProcessRestrictionResponse::Swap(csProcessRestrictionResponse* other) {
  if (other != this) {
    std::swap(processid_, other->processid_);
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(failreason_, other->failreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csProcessRestrictionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csProcessRestrictionResponse_descriptor_;
  metadata.reflection = csProcessRestrictionResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* csRecordResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csRecordResponse_Result_descriptor_;
}
bool csRecordResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const csRecordResponse_Result csRecordResponse::START_SUCCESS;
const csRecordResponse_Result csRecordResponse::START_FAILURE;
const csRecordResponse_Result csRecordResponse::STOP_SUCCESS;
const csRecordResponse_Result csRecordResponse::STOP_FAILURE;
const csRecordResponse_Result csRecordResponse::Result_MIN;
const csRecordResponse_Result csRecordResponse::Result_MAX;
const int csRecordResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int csRecordResponse::kIsMachineFieldNumber;
const int csRecordResponse::kResultFieldNumber;
const int csRecordResponse::kFailReasonFieldNumber;
#endif  // !_MSC_VER

csRecordResponse::csRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.csRecordResponse)
}

void csRecordResponse::InitAsDefaultInstance() {
}

csRecordResponse::csRecordResponse(const csRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.csRecordResponse)
}

void csRecordResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ismachine_ = false;
  result_ = 0;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csRecordResponse::~csRecordResponse() {
  // @@protoc_insertion_point(destructor:agent.csRecordResponse)
  SharedDtor();
}

void csRecordResponse::SharedDtor() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
  }
}

void csRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csRecordResponse_descriptor_;
}

const csRecordResponse& csRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentProtocol_2eproto();
  return *default_instance_;
}

csRecordResponse* csRecordResponse::default_instance_ = NULL;

csRecordResponse* csRecordResponse::New() const {
  return new csRecordResponse;
}

void csRecordResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<csRecordResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ismachine_, result_);
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.csRecordResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .agent.csRecordResponse.Result result = 3;
      case 3: {
        if (tag == 24) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::agent::csRecordResponse_Result_IsValid(value)) {
            set_result(static_cast< ::agent::csRecordResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_failReason;
        break;
      }

      // optional string failReason = 4;
      case 4: {
        if (tag == 34) {
         parse_failReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isMachine;
        break;
      }

      // required bool isMachine = 5;
      case 5: {
        if (tag == 40) {
         parse_isMachine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismachine_)));
          set_has_ismachine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.csRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.csRecordResponse)
  return false;
#undef DO_
}

void csRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.csRecordResponse)
  // required .agent.csRecordResponse.Result result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional string failReason = 4;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->failreason(), output);
  }

  // required bool isMachine = 5;
  if (has_ismachine()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ismachine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent.csRecordResponse)
}

::google::protobuf::uint8* csRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.csRecordResponse)
  // required .agent.csRecordResponse.Result result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional string failReason = 4;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->failreason(), target);
  }

  // required bool isMachine = 5;
  if (has_ismachine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ismachine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent.csRecordResponse)
  return target;
}

int csRecordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isMachine = 5;
    if (has_ismachine()) {
      total_size += 1 + 1;
    }

    // required .agent.csRecordResponse.Result result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string failReason = 4;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csRecordResponse::MergeFrom(const csRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ismachine()) {
      set_ismachine(from.ismachine());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csRecordResponse::CopyFrom(const csRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csRecordResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void csRecordResponse::Swap(csRecordResponse* other) {
  if (other != this) {
    std::swap(ismachine_, other->ismachine_);
    std::swap(result_, other->result_);
    std::swap(failreason_, other->failreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csRecordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csRecordResponse_descriptor_;
  metadata.reflection = csRecordResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace agent

// @@protoc_insertion_point(global_scope)
