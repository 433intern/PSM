package agent;


enum agentType
{
	AgentIDRequest = 0;
	AgentIDResponse = 1;
	ProcessListRequest = 2;
	ProcessListResponse = 3;

	CounterListRequest = 4;
	CounterListResponse = 5;

	CurrentProcessListSend = 6;

	HealthCheck = 8;
	HealthAck = 9;

	ProcessCommandRequest = 10;
	ProcessCommandResponse = 11;
	CounterCommandRequest = 12;
	CounterCommandResponse = 13;
	ProcessRestrictionRequest = 14;
	ProcessRestrictionResponse = 15;

	StartRecord = 16;
	StopRecord = 17;

	ProcessInfoSend = 18;
	MachineInfoSend = 21;

	AgentReady = 22;

	RecordResponse = 23;
}

message csAgentIDRequest
{
	required int32 hostIP = 1;
}

message scAgentIDResponse
{
	required int32 agentID = 1;
}

message csProcessListRequest
{
}

message scProcessListResponse
{
	repeated string processName = 1;
}

message csCounterListRequest
{
	required bool isMachine = 1;
}

message scCounterListResponse
{
	required bool isMachine = 1;
	repeated string counterName = 2;
}

message csAgentReady
{
}

message CurrentProcess
{
	required string processName = 1;
	repeated int32 processID = 2;
}

message csCurrentProcessListSend
{
	repeated CurrentProcess processInfo = 1;
}

message scHealthCheck
{
}

message csHealthAck
{
}

enum ProcessCommandType
{
	START = 0;
	RESTART = 1;
	STOP = 2;
	ADDLIST = 3;
	DELETELIST = 4;
	ALLSTOP = 5;
}

message scProcessCommandRequest
{
	required ProcessCommandType type = 1;
	required string processName = 2;
}

message csProcessCommandResponse
{
	required ProcessCommandType type = 1;
	repeated int32 processID = 2;

	enum Result
	{
		SUCCESS = 0;
		FAILURE = 1;
	}

	required Result result = 3;
	optional string failReason = 4;
}

enum CounterCommandType
{
	CADDLIST = 1;
	CDELETELIST = 2;
}

message scCounterCommandRequest
{
	required CounterCommandType type = 1;
	required string CounterName = 2;
	required bool isMachine = 3;
}

message csCounterCommandResponse
{
	required CounterCommandType type = 1;

	enum Result
	{
		SUCCESS = 0;
		FAILURE = 1;
	}

	required Result result = 3;
	optional string failReason = 4;
}

message scStartRecord
{
	required bool isMachine = 5;
	required int32 totalRecordTime = 1;
	required int32 interval = 2;
	required int32 responseTime = 3;
	optional int64 delay = 4;
}

message scStopRecord
{
	required bool isMachine = 1;
}

message Log
{
	required int64 timeStamp = 1;
	required double value = 2;
}

message ProcessInfo
{
	required string processName = 1;
	required int32 processID = 2;
	repeated Log logs = 3;
}

message ProcessInfos
{
	required string counterName = 1;
	repeated ProcessInfo msg = 2;
}

message csTotalProcessInfoSend
{
	repeated ProcessInfos info = 1;
}

message MachineInfos
{
	required string counterName = 1;
	repeated Log logs = 2;
}

message csTotalMachineInfoSend
{
	repeated MachineInfos info = 1;
}

// @TODO : restriction protocol 

enum Restriction
{
	USER_TIME_LIMIT = 0;
	MAX_WORKING_SET_SIZE = 1;
	MIN_WORKING_SET_SIZE = 2;
}

message scProcessRestrictionRequest
{
	required int32 processID = 1;
	required Restriction type = 2;
	required int32 value1 = 3;
	optional int32 value2 = 4; // if LARGE_INTEGER
}

message csProcessRestrictionResponse
{
	required int32 processID = 1;
	required Restriction type = 2;

	enum Result
	{
		SUCCESS = 0;
		FAILURE = 1;
	}
	required Result result = 3;
	optional string failReason = 4;
}

message csRecordResponse
{
	enum Result
	{
		START_SUCCESS = 0;
		START_FAILURE = 1;
		STOP_SUCCESS = 2;
		STOP_FAILURE = 3;
	}
	required bool isMachine = 5;
	required Result result = 3;
	optional string failReason = 4;
}